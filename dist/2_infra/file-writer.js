"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.contentForReadMeTxt = exports.addSubPart = exports.writeOutputPart = exports.addOutputPart = void 0;
const fs_1 = require("fs");
const path = __importStar(require("path"));
const outputParts = [];
function deleteAllFiles(supPartPath) {
    if (!(0, fs_1.existsSync)(supPartPath))
        return;
    const files = (0, fs_1.readdirSync)(supPartPath);
    for (const file of files) {
        console.log("Deleting file: " + file);
        (0, fs_1.unlinkSync)(path.join(supPartPath, file));
    }
}
const subParts = [];
function addOutputPart(outputPart) {
    outputParts.push(outputPart);
}
exports.addOutputPart = addOutputPart;
function writeOutputPart(fileName) {
    (0, fs_1.writeFileSync)(fileName, outputParts.join('\n'), "utf-8");
    //Delete all files in flowParts
    const supPartPath = path.join(path.dirname(fileName), 'flowParts');
    deleteAllFiles(supPartPath);
    if (!(0, fs_1.existsSync)(supPartPath))
        (0, fs_1.mkdirSync)(supPartPath, { recursive: true });
    subParts.forEach(subPart => {
        const supPartPath = path.join(path.dirname(fileName), 'flowParts');
        if (!(0, fs_1.existsSync)(supPartPath))
            (0, fs_1.mkdirSync)(supPartPath, { recursive: true });
        (0, fs_1.writeFileSync)(path.join(supPartPath, subPart.names.join('-')), subPart.content, "utf-8");
    });
    (0, fs_1.writeFileSync)(path.join(supPartPath, 'ReadMe.txt'), contentForReadMeTxt(), "utf-8");
}
exports.writeOutputPart = writeOutputPart;
function addSubPart(outputPart, subpartNames) {
    subParts.push({ names: subpartNames, content: outputPart });
}
exports.addSubPart = addSubPart;
function contentForReadMeTxt() {
    return `
    Do not edit the files in this folder. They are generated by the node-red-flow-reporter.

    The files should be updated every time the flow is updated.

    The purpose is to be able to do a proper text compare of the flow files.    
  
    The file names are constructed from the node type and the headline of the content.

    i.e. ui_template-format_Process_Monitor.html

    Node type: ui_template
    Node Name: Process Monitor
    Property (Headline in table): format
    File type: html

    If there is no node name, the  the node id is used instead.

    Link to tool:
      https://github.com/Scaletronic/node-red-flow-reporter

  `;
}
exports.contentForReadMeTxt = contentForReadMeTxt;
