[
  {
      "id": "be047adf.efd448",
      "type": "tab",
      "label": "DWS Server",
      "disabled": false,
      "info": "",
      "env": []
  },
  {
      "id": "d0f9e0d6e6258576",
      "type": "group",
      "z": "be047adf.efd448",
      "name": "Infeed1",
      "style": {
          "fill": "#bfc7d7",
          "label": true,
          "color": "#000000",
          "fill-opacity": "0.6"
      },
      "nodes": [
          "2abb3e4d654c7a33",
          "cedb940eda0b59da",
          "d3403cf841b2336d",
          "b0caffca.1c818",
          "7503fce5.274ebc",
          "c00a9f34eea08458",
          "2ad509762ed48d10",
          "19bf85778ba23374",
          "1b91ed16100ff8c1",
          "1046455d93641918",
          "3174a4a9c1b85452",
          "2da00ec5ddca9ed7",
          "7469d3c6cb966ed2",
          "f3ced8bb791f1bdc",
          "ef6c401682f7351a",
          "93dd0d06.a65f2",
          "5556c19d32c7fe23",
          "c017674b.66e948",
          "cc7b4f05f65c6b5b",
          "e0b4d096f6d0a9b4",
          "893fd5288be0dca5"
      ],
      "x": 314,
      "y": 199,
      "w": 1052,
      "h": 509.5
  },
  {
      "id": "ab47ad5c46819db3",
      "type": "group",
      "z": "be047adf.efd448",
      "name": "Initialization",
      "style": {
          "label": true,
          "fill": "#ffffbf",
          "fill-opacity": "0.6",
          "color": "#ffffff"
      },
      "nodes": [
          "282a8e74a5f1b642",
          "deaba56c.7622f8",
          "30894e81bab6e4dd",
          "b4dc0c9509def540"
      ],
      "x": 314,
      "y": 39,
      "w": 522,
      "h": 122
  },
  {
      "id": "8107ad0873d7290c",
      "type": "group",
      "z": "be047adf.efd448",
      "name": "dashboard",
      "style": {
          "label": true,
          "fill": "#ffffbf",
          "fill-opacity": "0.6"
      },
      "nodes": [
          "7446c5f29a2e24cf",
          "851e490f0db2b80d",
          "96fa1af074c20f9f",
          "baba6b48d0d5b41d",
          "9095bbc74a4ab77e",
          "2e648283d8aaec5f",
          "3106ac60b5b931b8",
          "ef89b1d0c491f7aa",
          "24e4fb9f8178380c",
          "48854737a90387d7",
          "db838ba51eb7a311",
          "0c36ff577185d03e"
      ],
      "x": 1394,
      "y": 19,
      "w": 592,
      "h": 362
  },
  {
      "id": "33bc0eefe3ee9470",
      "type": "group",
      "z": "be047adf.efd448",
      "name": "normal test ring",
      "style": {
          "label": true,
          "fill": "#eee"
      },
      "nodes": [
          "814e3bd05b5dd5c4",
          "e486312f9cd13b52",
          "40945192f139cf66",
          "9d8e64a67ee27b1e",
          "4e337c232cb91462",
          "2be0a7ed47de906c",
          "c4bd6fd245acdf8e",
          "8721cdeffab5c562",
          "a6feae86a865509d",
          "30f677afa66c9221",
          "c18a7150783a6db6",
          "e1bdf3de907da5f2",
          "573f722f5578acfd",
          "2a7265a6ec1a950a",
          "0d776c8e116409fd",
          "b1ef0ca0df6f84fc",
          "9b586b7b37c4d2f5",
          "76e3ff312ca5d668",
          "83ec1ca3e0be853d",
          "5025060101b1c0a6",
          "2ef19d2da90f87b9",
          "a1ba419b837b9b2f",
          "99482bc8d5166eab",
          "b3342c2850b2ea62",
          "d3d8446fbc47d4f0",
          "7a64bed2e868597a",
          "652404481a2f7646",
          "c327a3f8027faa54",
          "b50984606155ab62",
          "3a4c5eb03128a018",
          "d7ced7a7a63a7b78",
          "c92977736bc11d29",
          "cf477f9d06ee9bd7",
          "52f8a22549a760f7",
          "796cde9d56d35373",
          "42227d3335555497",
          "45fc16aa91bacc03",
          "0725f30fbebf995a",
          "34bb5fb59b3b84bb",
          "74a9f3a80d0e1aa6",
          "d8a9abd0041b5772",
          "bdbec441d2ccf942",
          "dffd489bf216edb6",
          "562093d226e5b4e7",
          "797c757bd8384888"
      ],
      "x": 54,
      "y": 799,
      "w": 1542,
      "h": 1262
  },
  {
      "id": "884cb4a3a6cca981",
      "type": "group",
      "z": "be047adf.efd448",
      "name": "M20 first belt dynamic speed control",
      "style": {
          "label": true,
          "fill": "#eee"
      },
      "nodes": [
          "bed4956e8e9de4ad",
          "dbbc511810a09345",
          "93201d9a30d824e5",
          "74c3633463b783ed",
          "eb2071416d4b5bb2",
          "508fd4b21ada3fd8",
          "b7bac5299f84d5cd",
          "63f394219342f020",
          "cfb4b741f7187dd2",
          "59d7a68a11d26762",
          "d44349e4c59ea788",
          "c3125f9e34084b54",
          "d5b09716aa93038e",
          "5d74871404416504",
          "950dd906954d05b7",
          "a10a57e2d5798531",
          "686c0086ee6a4275",
          "5052f5a8154563f2",
          "804ba8c0076025a3",
          "6063c3108320fd12",
          "e74ab67fd53f7407",
          "bbdf8c8e990aeeb1",
          "037a9df5f613f436",
          "fe37479312cc47a8",
          "10ccf3e541fdf8cf"
      ],
      "x": 1714,
      "y": 799,
      "w": 822,
      "h": 1122
  },
  {
      "id": "ed186c194cd4b694",
      "type": "group",
      "z": "be047adf.efd448",
      "name": "M10 first belt dynamic speed control",
      "style": {
          "label": true,
          "fill": "#eee"
      },
      "nodes": [
          "8b15b1624398d6f7",
          "086e7895c1265529",
          "f8a58b98870429e3",
          "c95bcee4d8b56cae",
          "3e469c6337dd9b5e",
          "90975cb18f1564e1",
          "64694807792dd2b4",
          "2995dbf1cd2ef3be",
          "36064861ef3752ea",
          "0d6aa51b24ae62ec",
          "91a5073c9c085f46",
          "d240b6813d12c899",
          "4531e25fd4bf6dcf",
          "74c3ab723a8fcdef",
          "1be5255ce889fad8",
          "7465f1afcb57d283",
          "3cd2e7e56731da54",
          "2fa82b56dbe244e1",
          "744007810b2f3c7b",
          "46864a4d69857eba",
          "648a574e903eea8a",
          "3b03398361712834",
          "eed2c746802a2a0f",
          "16b7e62cc77e6631",
          "4827b87915cb8562",
          "9d4733db04bc6d76",
          "220ae5df3284e7e2",
          "01b88c86119526dc",
          "7e9850d297b906d5",
          "29d6dd72b00cadb4"
      ],
      "x": 2574,
      "y": 799,
      "w": 822,
      "h": 1082
  },
  {
      "id": "5648aea3.4ed66",
      "type": "statusBroker",
      "name": "Status broker",
      "logLevel": "6",
      "showStatusInEditor": true
  },
  {
      "id": "4c2f7465.fa41dc",
      "type": "ui_tab",
      "name": "Scaletronic DWS",
      "icon": "dashboard",
      "disabled": false,
      "hidden": false
  },
  {
      "id": "ddfe3c82.99dd28",
      "type": "ui_group",
      "name": "Center group",
      "tab": "4c2f7465.fa41dc",
      "order": 3,
      "disp": false,
      "width": "10",
      "collapse": false
  },
  {
      "id": "b9565ab5.0776d",
      "type": "ui_base",
      "theme": {
          "name": "theme-custom",
          "lightTheme": {
              "default": "#0094CE",
              "baseColor": "#0094CE",
              "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
              "edited": true,
              "reset": false
          },
          "darkTheme": {
              "default": "#097479",
              "baseColor": "#008080",
              "baseFont": "Verdana,Verdana,Geneva,sans-serif",
              "edited": true,
              "reset": false
          },
          "customTheme": {
              "name": "DWS",
              "default": "#4B7930",
              "baseColor": "#4B7930",
              "baseFont": "Verdana,Verdana,Geneva,sans-serif",
              "reset": false
          },
          "themeState": {
              "base-color": {
                  "default": "#4B7930",
                  "value": "#4B7930",
                  "edited": true
              },
              "page-titlebar-backgroundColor": {
                  "value": "#4B7930",
                  "edited": false
              },
              "page-backgroundColor": {
                  "value": "#111111",
                  "edited": false
              },
              "page-sidebar-backgroundColor": {
                  "value": "#333333",
                  "edited": false
              },
              "group-textColor": {
                  "value": "#6db046",
                  "edited": false
              },
              "group-borderColor": {
                  "value": "#111111",
                  "edited": true
              },
              "group-backgroundColor": {
                  "value": "#111111",
                  "edited": true
              },
              "widget-textColor": {
                  "value": "#eeeeee",
                  "edited": false
              },
              "widget-backgroundColor": {
                  "value": "#4b7930",
                  "edited": false
              },
              "widget-borderColor": {
                  "value": "#111111",
                  "edited": true
              },
              "base-font": {
                  "value": "Verdana,Verdana,Geneva,sans-serif"
              }
          },
          "angularTheme": {
              "primary": "indigo",
              "accents": "blue",
              "warn": "red",
              "background": "grey",
              "palette": "light"
          }
      },
      "site": {
          "name": "Scaletronic DWS",
          "hideToolbar": "true",
          "allowSwipe": "false",
          "lockMenu": "false",
          "allowTempTheme": "false",
          "dateFormat": "DD/MM/YYYY",
          "sizes": {
              "sx": 105,
              "sy": 67,
              "gx": 6,
              "gy": 6,
              "cx": 6,
              "cy": 0,
              "px": 0,
              "py": 0
          }
      }
  },
  {
      "id": "ae55bf81.f045c",
      "type": "ui_group",
      "name": "Dmensions and weight",
      "tab": "4c2f7465.fa41dc",
      "order": 2,
      "disp": false,
      "width": "3",
      "collapse": false
  },
  {
      "id": "8efe9fc5.d684b8",
      "type": "ui_group",
      "name": "Title bar",
      "tab": "4c2f7465.fa41dc",
      "order": 1,
      "disp": false,
      "width": "16",
      "collapse": false
  },
  {
      "id": "20ceecca.0affb4",
      "type": "ui_group",
      "name": "Right group",
      "tab": "4c2f7465.fa41dc",
      "order": 5,
      "disp": false,
      "width": "3",
      "collapse": false
  },
  {
      "id": "1642737a.30dccd",
      "type": "systemConfig",
      "name": "System config",
      "statusBroker": "5648aea3.4ed66"
  },
  {
      "id": "e5903d21.b21808",
      "type": "ioConnect",
      "name": "PLC",
      "statusBroker": "5648aea3.4ed66",
      "verboseBinSensorNodeStatus": true,
      "host": "plc.local",
      "port": "4840",
      "deviceType": "PLC",
      "enableDigialOutputs": true,
      "enableDigialInputs": true,
      "inputPoolSize": "6",
      "outputPoolSize": "6",
      "pollInterval": "10"
  },
  {
      "id": "cbd0fcdc.b8ce38",
      "type": "ui_group",
      "name": "DWS System",
      "tab": "4c2f7465.fa41dc",
      "order": 6,
      "disp": false,
      "width": "16",
      "collapse": false
  },
  {
      "id": "5ea2db785554b65f",
      "type": "ui_group",
      "name": "Buttons",
      "tab": "4c2f7465.fa41dc",
      "order": 1,
      "disp": false,
      "width": "2",
      "collapse": false
  },
  {
      "id": "7169103ebb173261",
      "type": "projectConfig",
      "name": "Project Config",
      "serviceMode": "",
      "idleTimeout": "",
      "maxPackageLength": "1000",
      "maxPackageWidth": "800",
      "minPackageLength": "100",
      "minPackageWidth": "100",
      "minPackageGap": "",
      "projectSetupType": "testStaticSort",
      "sortTestRoundRobinLanes": "",
      "sortTestStaticLaneSort": "3",
      "sortTestStaticLaneError": "LOOP"
  },
  {
      "id": "bc064b515d899a32",
      "type": "statusBroker",
      "name": "",
      "logLevel": "6",
      "showStatusInEditor": true
  },
  {
      "id": "d86128038521bbd2",
      "type": "ioConnect",
      "name": "ICP",
      "statusBroker": "bc064b515d899a32",
      "verboseBinSensorNodeStatus": true,
      "host": "10.50.5.90",
      "port": "502",
      "deviceType": "ICP",
      "enableDigialOutputs": true,
      "enableDigialInputs": true,
      "inputPoolSize": "6",
      "outputPoolSize": "6",
      "pollInterval": "10"
  },
  {
      "id": "2abb3e4d654c7a33",
      "type": "infeedSegment",
      "z": "be047adf.efd448",
      "g": "d0f9e0d6e6258576",
      "projectConfig": "7169103ebb173261",
      "statusBroker": "5648aea3.4ed66",
      "idleTimeout": "0",
      "sensorPosition": "330",
      "beltVelocity": "560",
      "noOfMotorsToStartDownstream": "",
      "ensureDistanceType": "off",
      "ensureDistance": "200",
      "name": "Infeed",
      "outputs": 2,
      "x": 630,
      "y": 260,
      "wires": [
          [
              "cedb940eda0b59da"
          ],
          [
              "b0caffca.1c818"
          ]
      ]
  },
  {
      "id": "cedb940eda0b59da",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "g": "d0f9e0d6e6258576",
      "name": "M01",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M01",
      "outputs": 0,
      "x": 830,
      "y": 240,
      "wires": []
  },
  {
      "id": "d3403cf841b2336d",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "g": "d0f9e0d6e6258576",
      "name": "M02",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M02",
      "outputs": 0,
      "x": 830,
      "y": 320,
      "wires": []
  },
  {
      "id": "b0caffca.1c818",
      "type": "infeedSegment",
      "z": "be047adf.efd448",
      "g": "d0f9e0d6e6258576",
      "projectConfig": "7169103ebb173261",
      "statusBroker": "5648aea3.4ed66",
      "idleTimeout": "300",
      "sensorPosition": "280",
      "beltVelocity": "933",
      "noOfMotorsToStartDownstream": "",
      "ensureDistanceType": "off",
      "ensureDistance": "300",
      "name": "Spacer",
      "outputs": 3,
      "x": 620,
      "y": 340,
      "wires": [
          [
              "d3403cf841b2336d"
          ],
          [
              "19bf85778ba23374"
          ],
          [
              "2abb3e4d654c7a33"
          ]
      ]
  },
  {
      "id": "7503fce5.274ebc",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "g": "d0f9e0d6e6258576",
      "name": "M03",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M03",
      "outputs": 0,
      "x": 830,
      "y": 380,
      "wires": []
  },
  {
      "id": "93dd0d06.a65f2",
      "type": "binSensor",
      "z": "be047adf.efd448",
      "g": "d0f9e0d6e6258576",
      "name": "S13 (Extension)",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "inputNo": "S13",
      "outputs": 1,
      "x": 420,
      "y": 580,
      "wires": [
          [
              "f3ced8bb791f1bdc"
          ]
      ]
  },
  {
      "id": "c017674b.66e948",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "g": "d0f9e0d6e6258576",
      "name": "M05",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M05",
      "outputs": 0,
      "x": 810,
      "y": 640,
      "wires": []
  },
  {
      "id": "deaba56c.7622f8",
      "type": "hq",
      "z": "be047adf.efd448",
      "g": "ab47ad5c46819db3",
      "name": "HQ",
      "projectConfig": "7169103ebb173261",
      "ioConnect": "e5903d21.b21808",
      "x": 390,
      "y": 120,
      "wires": []
  },
  {
      "id": "c00a9f34eea08458",
      "type": "binSensor",
      "z": "be047adf.efd448",
      "g": "d0f9e0d6e6258576",
      "name": "S01 (Infeed)",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "inputNo": "S01",
      "outputs": 1,
      "x": 430,
      "y": 260,
      "wires": [
          [
              "2abb3e4d654c7a33"
          ]
      ]
  },
  {
      "id": "19bf85778ba23374",
      "type": "scanBeltCon",
      "z": "be047adf.efd448",
      "g": "d0f9e0d6e6258576",
      "name": "Scan1",
      "projectConfig": "7169103ebb173261",
      "statusBroker": "5648aea3.4ed66",
      "etaOffsetAfterBeltRestart": "",
      "scanBeltLength": "1500",
      "scanBeltVelocity": "930",
      "triggerSensorPos": "120",
      "minGap": "",
      "minSpacingType": "backToFront",
      "minSpacing": "300",
      "noOfMotorsToStartDownstream": "",
      "stopZoneLength": "350",
      "idleTimeout": "300",
      "disableInstrumentWait": false,
      "outputs": 4,
      "x": 630,
      "y": 420,
      "wires": [
          [
              "b0caffca.1c818"
          ],
          [
              "7503fce5.274ebc"
          ],
          [
              "2da00ec5ddca9ed7",
              "1046455d93641918",
              "3174a4a9c1b85452",
              "7469d3c6cb966ed2",
              "e0b4d096f6d0a9b4",
              "893fd5288be0dca5"
          ],
          [
              "f3ced8bb791f1bdc"
          ]
      ]
  },
  {
      "id": "f3ced8bb791f1bdc",
      "type": "laneSegment",
      "z": "be047adf.efd448",
      "g": "d0f9e0d6e6258576",
      "name": "Extension",
      "projectConfig": "7169103ebb173261",
      "statusBroker": "5648aea3.4ed66",
      "beltLength": "",
      "beltType": "lane",
      "beltHasSensor": true,
      "beltSpeed": "940",
      "etaOffsetAfterBeltRestart": "-250",
      "stopOnInstrumentWait": false,
      "stopZoneLength": "200",
      "sensorPositionFromEnd": "200",
      "noOfMotorsToStartDownstream": "6",
      "idleTimeout": 300,
      "endOfLaneSegment": false,
      "endOfLaneHasBeltMotor": false,
      "hasCongestionSensor": true,
      "congestionTime": 1500,
      "maxDeltaEarlyMM": "",
      "maxDeltaLateMM": "",
      "minGap": "",
      "outputs": 3,
      "x": 620,
      "y": 580,
      "wires": [
          [
              "ef6c401682f7351a"
          ],
          [
              "5556c19d32c7fe23"
          ],
          [
              "19bf85778ba23374"
          ]
      ]
  },
  {
      "id": "ef6c401682f7351a",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "g": "d0f9e0d6e6258576",
      "name": "M04",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M04",
      "outputs": 0,
      "x": 810,
      "y": 560,
      "wires": []
  },
  {
      "id": "1046455d93641918",
      "type": "dmDimensioner",
      "z": "be047adf.efd448",
      "g": "d0f9e0d6e6258576",
      "name": "dimensioner1",
      "statusBroker": "5648aea3.4ed66",
      "port": "5540",
      "readingDelay": "2000",
      "enableHeartbeat": false,
      "heartbeatMessage": "HEARTBEAT",
      "warnAfter": 6000,
      "x": 880,
      "y": 440,
      "wires": []
  },
  {
      "id": "2da00ec5ddca9ed7",
      "type": "dxBarcodeScanner",
      "z": "be047adf.efd448",
      "g": "d0f9e0d6e6258576",
      "name": "barcode1",
      "statusBroker": "5648aea3.4ed66",
      "port": "5520",
      "readingDelay": "1800",
      "mode": "standard",
      "minNoOfCodes": "1",
      "acceptedCodesJson": "[]",
      "imageFrames": "",
      "x": 1060,
      "y": 500,
      "wires": []
  },
  {
      "id": "1b91ed16100ff8c1",
      "type": "binSensor",
      "z": "be047adf.efd448",
      "g": "d0f9e0d6e6258576",
      "name": "S09 (Scan)",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "inputNo": "S09",
      "outputs": 1,
      "x": 440,
      "y": 420,
      "wires": [
          [
              "19bf85778ba23374"
          ]
      ]
  },
  {
      "id": "2ad509762ed48d10",
      "type": "binSensor",
      "z": "be047adf.efd448",
      "g": "d0f9e0d6e6258576",
      "name": "S02 (Spacer)",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "inputNo": "S02",
      "outputs": 1,
      "x": 430,
      "y": 340,
      "wires": [
          [
              "b0caffca.1c818"
          ]
      ]
  },
  {
      "id": "30894e81bab6e4dd",
      "type": "IoErrorMonitor",
      "z": "be047adf.efd448",
      "g": "ab47ad5c46819db3",
      "name": "",
      "ioConnect": "e5903d21.b21808",
      "inputsES": "",
      "inputsServoError": "WD01.Error\nWD02.Error",
      "outputs": 1,
      "x": 730,
      "y": 80,
      "wires": [
          [
              "48854737a90387d7"
          ]
      ]
  },
  {
      "id": "282a8e74a5f1b642",
      "type": "logger",
      "z": "be047adf.efd448",
      "g": "ab47ad5c46819db3",
      "name": "",
      "statusBroker": "5648aea3.4ed66",
      "logToDb": false,
      "logDb": "stdws",
      "logFilename": "dws.log",
      "outputs": 0,
      "x": 390,
      "y": 80,
      "wires": []
  },
  {
      "id": "b4dc0c9509def540",
      "type": "StartStopControl",
      "z": "be047adf.efd448",
      "g": "ab47ad5c46819db3",
      "name": "",
      "statusBroker": "5648aea3.4ed66",
      "noOfMotorsToStartDownstream": "",
      "ioConnect": "e5903d21.b21808",
      "inputEmergency": "Emergency",
      "inputStart": "Start",
      "breakOnFatalError": true,
      "globalScope": true,
      "invertEmergencyState": false,
      "outputs": 2,
      "x": 650,
      "y": 120,
      "wires": [
          [
              "2abb3e4d654c7a33",
              "96fa1af074c20f9f"
          ],
          [
              "48854737a90387d7"
          ]
      ]
  },
  {
      "id": "3174a4a9c1b85452",
      "type": "ipCamera",
      "z": "be047adf.efd448",
      "g": "d0f9e0d6e6258576",
      "host": "camera1.local",
      "port": 80,
      "uri": "snap.jpg",
      "parameters": "",
      "ssl": false,
      "user": "admin",
      "password": "admin",
      "filePrefix": "dws_",
      "fileType": "jpg",
      "noOfImages": "2",
      "skipFirst": true,
      "firstImageDelay": 400,
      "timeBetweenImages": "0",
      "statusBroker": "5648aea3.4ed66",
      "name": "camera1",
      "outputs": 1,
      "x": 1060,
      "y": 440,
      "wires": [
          []
      ]
  },
  {
      "id": "814e3bd05b5dd5c4",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "M06",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M06",
      "outputs": 0,
      "x": 1070,
      "y": 920,
      "wires": []
  },
  {
      "id": "e486312f9cd13b52",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "M07",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M07",
      "outputs": 0,
      "x": 990,
      "y": 1160,
      "wires": []
  },
  {
      "id": "40945192f139cf66",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "M08",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M08",
      "outputs": 0,
      "x": 1070,
      "y": 1560,
      "wires": []
  },
  {
      "id": "9d8e64a67ee27b1e",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "M16",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M16",
      "outputs": 0,
      "x": 990,
      "y": 1000,
      "wires": []
  },
  {
      "id": "4e337c232cb91462",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "M20",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M20",
      "outputs": 0,
      "x": 990,
      "y": 1360,
      "wires": []
  },
  {
      "id": "5556c19d32c7fe23",
      "type": "laneSegment",
      "z": "be047adf.efd448",
      "g": "d0f9e0d6e6258576",
      "name": "Merge",
      "projectConfig": "7169103ebb173261",
      "statusBroker": "5648aea3.4ed66",
      "beltLength": "",
      "beltType": "merge",
      "beltHasSensor": true,
      "beltSpeed": "1400",
      "etaOffsetAfterBeltRestart": "",
      "stopOnInstrumentWait": false,
      "stopZoneLength": "",
      "sensorPositionFromEnd": "400",
      "staticBeltRestartDelay": "",
      "noOfMotorsToStartDownstream": 2,
      "idleTimeout": 300,
      "endOfLaneSegment": false,
      "endOfLaneHasBeltMotor": false,
      "hasCongestionSensor": true,
      "congestionTime": 1500,
      "minSpacingType": "",
      "maxDeltaEarlyMM": "",
      "maxDeltaLateMM": "",
      "minGap": "",
      "outputs": 3,
      "x": 630,
      "y": 660,
      "wires": [
          [
              "c017674b.66e948"
          ],
          [
              "8721cdeffab5c562",
              "6063c3108320fd12",
              "2995dbf1cd2ef3be"
          ],
          [
              "f3ced8bb791f1bdc"
          ]
      ]
  },
  {
      "id": "7446c5f29a2e24cf",
      "type": "ui_template",
      "z": "be047adf.efd448",
      "d": true,
      "g": "8107ad0873d7290c",
      "group": "cbd0fcdc.b8ce38",
      "name": "Process Monitor",
      "order": 1,
      "width": 16,
      "height": 3,
      "format": "<script>\n(function(scope) {\n  /* DWS system structure */\n  scope.dwsSystem = {\n\n  \"infeedTables\": [\n    {\n      \"infeedTable\": [\n        {\n          \"run\":  false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        },\n      \n        {\n          \"run\":  false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        },\n      \n        {\n          \"run\":  false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        },\n      ],\n    \n      \"scanTable\": {\n        \"trigger\": false,\n        \"run\": false,\n        \"stop\": true,\n        \"noConnect\": false,\n        \"txt\": \"\",\n        \"txtType\": \"\",\n        \"name\": \"\"\n      },\n    \n      \"laneSegments\": [\n    \n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        },\n          \n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        },\n          \n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        },\n          \n      ]\n    },\n   \n    {\n      \"infeedTable\": [\n        {\n          \"run\":  false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        },\n      \n        {\n          \"run\":  false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        },\n      \n        {\n          \"run\":  false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        },\n      ],\n    \n      \"scanTable\": {\n        \"trigger\": false,\n        \"run\": false,\n        \"stop\": true,\n        \"noConnect\": false,\n        \"txt\": \"\",\n        \"txtType\": \"\",\n        \"name\": \"\"\n      },\n    \n      \"laneSegments\": [\n    \n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        },\n          \n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        },\n          \n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        },\n          \n      ]\n    },\n   \n  ],\n   \n  \"sortTable\": [\n  \n    {\n      \"ringSegment\": \"1\",\n      \"objType\": \"sortLane\",\n      \"run\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"dropOff\": false,\n      \"dropOn\": false,\n      \"congested\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\"\n    },\n    \n    {\n      \"ringSegment\": \"1\",\n      \"objType\": \"sortLane\",\n      \"run\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"dropOff\": false,\n      \"dropOn\": false,\n      \"congested\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\"\n    },\n    \n    {\n      \"ringSegment\": \"1\",\n      \"objType\": \"sortLane\",\n      \"run\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"dropOff\": false,\n      \"dropOn\": false,\n      \"congested\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\"\n    },\n    \n    {\n      \"ringSegment\": \"1\",\n      \"objType\": \"diverter\",\n      \"runStraight\": false,\n      \"runLeft\": false,\n      \"runRight\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\",\n      \"left\": [],\n      \"right\": []\n    },\n    {\n      \"ringSegment\": \"1\",\n      \"objType\": \"sortLane\",\n      \"run\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"dropOff\": false,\n      \"dropOn\": false,\n      \"congested\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\"\n    },\n    \n    {\n      \"ringSegment\": \"1\",\n      \"objType\": \"diverter\",\n      \"runStraight\": false,\n      \"runLeft\": false,\n      \"runRight\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\",\n      \"left\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ],\n      \"right\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ]\n    },\n    {\n      \"ringSegment\": \"1\",\n      \"objType\": \"sortLane\",\n      \"run\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"dropOff\": false,\n      \"dropOn\": false,\n      \"congested\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\"\n    },\n    \n    {\n      \"ringSegment\": \"1\",\n      \"objType\": \"diverter\",\n      \"runStraight\": false,\n      \"runLeft\": false,\n      \"runRight\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\",\n      \"left\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ],\n      \"right\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ]\n    },\n    {\n      \"ringSegment\": \"1\",\n      \"objType\": \"sortLane\",\n      \"run\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"dropOff\": false,\n      \"dropOn\": false,\n      \"congested\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\"\n    },\n    \n    {\n      \"ringSegment\": \"1\",\n      \"objType\": \"diverter\",\n      \"runStraight\": false,\n      \"runLeft\": false,\n      \"runRight\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\",\n      \"left\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ],\n      \"right\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ]\n    },\n    {\n      \"ringSegment\": \"1\",\n      \"objType\": \"sortLane\",\n      \"run\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"dropOff\": false,\n      \"dropOn\": false,\n      \"congested\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\"\n    },\n    \n    {\n      \"ringSegment\": \"1\",\n      \"objType\": \"diverter\",\n      \"runStraight\": false,\n      \"runLeft\": false,\n      \"runRight\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\",\n      \"left\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ],\n      \"right\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ]\n    },\n    {\n      \"ringSegment\": \"1\",\n      \"objType\": \"sortLane\",\n      \"run\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"dropOff\": false,\n      \"dropOn\": false,\n      \"congested\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\"\n    },\n    \n    {\n      \"ringSegment\": \"1\",\n      \"objType\": \"diverter\",\n      \"runStraight\": false,\n      \"runLeft\": false,\n      \"runRight\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\",\n      \"left\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ],\n      \"right\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ]\n    },\n    {\n      \"ringSegment\": \"1\",\n      \"objType\": \"sortLane\",\n      \"run\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"dropOff\": false,\n      \"dropOn\": false,\n      \"congested\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\"\n    },\n    \n    {\n      \"ringSegment\": \"1\",\n      \"objType\": \"diverter\",\n      \"runStraight\": false,\n      \"runLeft\": false,\n      \"runRight\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\",\n      \"left\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ],\n      \"right\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ]\n    },\n    {\n      \"ringSegment\": \"1\",\n      \"objType\": \"sortLane\",\n      \"run\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"dropOff\": false,\n      \"dropOn\": false,\n      \"congested\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\"\n    },\n    \n    {\n      \"ringSegment\": \"1\",\n      \"objType\": \"diverter\",\n      \"runStraight\": false,\n      \"runLeft\": false,\n      \"runRight\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\",\n      \"left\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ],\n      \"right\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ]\n    },\n    {\n      \"ringSegment\": \"1\",\n      \"objType\": \"sortLane\",\n      \"run\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"dropOff\": false,\n      \"dropOn\": false,\n      \"congested\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\"\n    },\n    \n    {\n      \"ringSegment\": \"1\",\n      \"objType\": \"diverter\",\n      \"runStraight\": false,\n      \"runLeft\": false,\n      \"runRight\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\",\n      \"left\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ],\n      \"right\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ]\n    },\n    {\n      \"ringSegment\": \"1\",\n      \"objType\": \"sortLane\",\n      \"run\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"dropOff\": false,\n      \"dropOn\": false,\n      \"congested\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\"\n    },\n    \n    {\n      \"ringSegment\": \"1\",\n      \"objType\": \"diverter\",\n      \"runStraight\": false,\n      \"runLeft\": false,\n      \"runRight\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\",\n      \"left\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ],\n      \"right\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ]\n    },\n    {\n      \"ringSegment\": \"1\",\n      \"objType\": \"sortLane\",\n      \"run\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"dropOff\": false,\n      \"dropOn\": false,\n      \"congested\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\"\n    },\n    \n    {\n      \"ringSegment\": \"1\",\n      \"objType\": \"diverter\",\n      \"runStraight\": false,\n      \"runLeft\": false,\n      \"runRight\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\",\n      \"left\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ],\n      \"right\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ]\n    },\n    {\n      \"ringSegment\": \"2\",\n      \"objType\": \"sortLane\",\n      \"run\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"dropOff\": false,\n      \"dropOn\": false,\n      \"congested\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\"\n    },\n    \n    {\n      \"ringSegment\": \"2\",\n      \"objType\": \"sortLane\",\n      \"run\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"dropOff\": false,\n      \"dropOn\": false,\n      \"congested\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\"\n    },\n    \n    {\n      \"ringSegment\": \"2\",\n      \"objType\": \"sortLane\",\n      \"run\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"dropOff\": false,\n      \"dropOn\": false,\n      \"congested\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\"\n    },\n    \n    {\n      \"ringSegment\": \"3\",\n      \"objType\": \"diverter\",\n      \"runStraight\": false,\n      \"runLeft\": false,\n      \"runRight\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\",\n      \"left\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ],\n      \"right\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ]\n    },\n    {\n      \"ringSegment\": \"3\",\n      \"objType\": \"sortLane\",\n      \"run\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"dropOff\": false,\n      \"dropOn\": false,\n      \"congested\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\"\n    },\n    \n    {\n      \"ringSegment\": \"3\",\n      \"objType\": \"diverter\",\n      \"runStraight\": false,\n      \"runLeft\": false,\n      \"runRight\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\",\n      \"left\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ],\n      \"right\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ]\n    },\n    {\n      \"ringSegment\": \"3\",\n      \"objType\": \"sortLane\",\n      \"run\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"dropOff\": false,\n      \"dropOn\": false,\n      \"congested\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\"\n    },\n    \n    {\n      \"ringSegment\": \"3\",\n      \"objType\": \"diverter\",\n      \"runStraight\": false,\n      \"runLeft\": false,\n      \"runRight\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\",\n      \"left\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ],\n      \"right\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ]\n    },\n    {\n      \"ringSegment\": \"3\",\n      \"objType\": \"sortLane\",\n      \"run\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"dropOff\": false,\n      \"dropOn\": false,\n      \"congested\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\"\n    },\n    \n    {\n      \"ringSegment\": \"3\",\n      \"objType\": \"diverter\",\n      \"runStraight\": false,\n      \"runLeft\": false,\n      \"runRight\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\",\n      \"left\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ],\n      \"right\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ]\n    },\n    {\n      \"ringSegment\": \"3\",\n      \"objType\": \"sortLane\",\n      \"run\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"dropOff\": false,\n      \"dropOn\": false,\n      \"congested\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\"\n    },\n    \n    {\n      \"ringSegment\": \"3\",\n      \"objType\": \"diverter\",\n      \"runStraight\": false,\n      \"runLeft\": false,\n      \"runRight\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\",\n      \"left\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ],\n      \"right\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ]\n    },\n    {\n      \"ringSegment\": \"3\",\n      \"objType\": \"sortLane\",\n      \"run\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"dropOff\": false,\n      \"dropOn\": false,\n      \"congested\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\"\n    },\n    \n    {\n      \"ringSegment\": \"3\",\n      \"objType\": \"diverter\",\n      \"runStraight\": false,\n      \"runLeft\": false,\n      \"runRight\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\",\n      \"left\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ],\n      \"right\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ]\n    },\n    {\n      \"ringSegment\": \"3\",\n      \"objType\": \"sortLane\",\n      \"run\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"dropOff\": false,\n      \"dropOn\": false,\n      \"congested\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\"\n    },\n    \n    {\n      \"ringSegment\": \"3\",\n      \"objType\": \"diverter\",\n      \"runStraight\": false,\n      \"runLeft\": false,\n      \"runRight\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\",\n      \"left\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ],\n      \"right\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ]\n    },\n    {\n      \"ringSegment\": \"3\",\n      \"objType\": \"sortLane\",\n      \"run\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"dropOff\": false,\n      \"dropOn\": false,\n      \"congested\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\"\n    },\n    \n    {\n      \"ringSegment\": \"3\",\n      \"objType\": \"diverter\",\n      \"runStraight\": false,\n      \"runLeft\": false,\n      \"runRight\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\",\n      \"left\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ],\n      \"right\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ]\n    },\n    {\n      \"ringSegment\": \"3\",\n      \"objType\": \"sortLane\",\n      \"run\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"dropOff\": false,\n      \"dropOn\": false,\n      \"congested\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\"\n    },\n    \n    {\n      \"ringSegment\": \"3\",\n      \"objType\": \"diverter\",\n      \"runStraight\": false,\n      \"runLeft\": false,\n      \"runRight\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\",\n      \"left\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ],\n      \"right\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ]\n    },\n    {\n      \"ringSegment\": \"3\",\n      \"objType\": \"sortLane\",\n      \"run\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"dropOff\": false,\n      \"dropOn\": false,\n      \"congested\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\"\n    },\n    \n    {\n      \"ringSegment\": \"3\",\n      \"objType\": \"diverter\",\n      \"runStraight\": false,\n      \"runLeft\": false,\n      \"runRight\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\",\n      \"left\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ],\n      \"right\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ]\n    },\n    {\n      \"ringSegment\": \"3\",\n      \"objType\": \"sortLane\",\n      \"run\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"dropOff\": false,\n      \"dropOn\": false,\n      \"congested\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\"\n    },\n    \n    {\n      \"ringSegment\": \"3\",\n      \"objType\": \"diverter\",\n      \"runStraight\": false,\n      \"runLeft\": false,\n      \"runRight\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\",\n      \"left\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ],\n      \"right\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ]\n    },\n    {\n      \"ringSegment\": \"3\",\n      \"objType\": \"sortLane\",\n      \"run\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"dropOff\": false,\n      \"dropOn\": false,\n      \"congested\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\"\n    },\n    \n    {\n      \"ringSegment\": \"3\",\n      \"objType\": \"diverter\",\n      \"runStraight\": false,\n      \"runLeft\": false,\n      \"runRight\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\",\n      \"left\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ],\n      \"right\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ]\n    },\n    {\n      \"ringSegment\": \"3\",\n      \"objType\": \"sortLane\",\n      \"run\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"dropOff\": false,\n      \"dropOn\": false,\n      \"congested\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\"\n    },\n    \n    {\n      \"ringSegment\": \"3\",\n      \"objType\": \"diverter\",\n      \"runStraight\": false,\n      \"runLeft\": false,\n      \"runRight\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\",\n      \"left\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ],\n      \"right\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ]\n    },\n    {\n      \"ringSegment\": \"3\",\n      \"objType\": \"sortLane\",\n      \"run\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"dropOff\": false,\n      \"dropOn\": false,\n      \"congested\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\"\n    },\n    \n    {\n      \"ringSegment\": \"3\",\n      \"objType\": \"diverter\",\n      \"runStraight\": false,\n      \"runLeft\": false,\n      \"runRight\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\",\n      \"left\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ],\n      \"right\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ]\n    },\n    {\n      \"ringSegment\": \"3\",\n      \"objType\": \"sortLane\",\n      \"run\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"dropOff\": false,\n      \"dropOn\": false,\n      \"congested\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\"\n    },\n    \n    {\n      \"ringSegment\": \"3\",\n      \"objType\": \"diverter\",\n      \"runStraight\": false,\n      \"runLeft\": false,\n      \"runRight\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\",\n      \"left\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ],\n      \"right\": [\n        {\n          \"objType\": \"sortLane\",\n          \"run\": false,\n          \"stop\": true,\n          \"noConnect\": false,\n          \"dropOff\": false,\n          \"dropOn\": false,\n          \"congested\": false,\n          \"txt\": \"\",\n          \"txtType\": \"\",\n          \"name\": \"\"\n        }\n      ]\n    },\n    {\n      \"ringSegment\": \"4\",\n      \"objType\": \"sortLane\",\n      \"run\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"dropOff\": false,\n      \"dropOn\": false,\n      \"congested\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\"\n    },\n    \n    {\n      \"ringSegment\": \"4\",\n      \"objType\": \"sortLane\",\n      \"run\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"dropOff\": false,\n      \"dropOn\": false,\n      \"congested\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\"\n    },\n    \n    {\n      \"ringSegment\": \"4\",\n      \"objType\": \"sortLane\",\n      \"run\": false,\n      \"stop\": true,\n      \"noConnect\": false,\n      \"dropOff\": false,\n      \"dropOn\": false,\n      \"congested\": false,\n      \"txt\": \"\",\n      \"txtType\": \"\",\n      \"name\": \"\"\n    },\n    \n  ]\n};\n  \nscope.$watch(\"msg\", (msg) => {\n  if(msg) {\n  // Update displayed status when an update is received\n  scope.dwsSystem = msg.payload;\n  }\n});\n})(scope);\n</script>\n\n<style>\n.process-view-area {\n  text-align: center;\n  background-color: var(--dws-container-bg-color, #333333);\n  border: 1px solid var(--dws-container-bg-color, #333333);\n  border-radius: 15px;\n  height: 100%;\n  overflow: hidden;\n}\n.processViewContainer {\n  display: inline-block;\n  width: auto;\n  height: 100%;\n}\n</style>\n\n<div class=\"process-view-area\">\n<div class=\"processViewContainer\">\n<svg viewBox=\"0 0 560 142\" height=\"100%\">\n\n<svg width=\"560\" height=\"142\" viewBox=\"0 0 560 142\">\n<style>\n  .dws-procmon-container { fill: var(--dws-container-bg-color, #333333); stroke: #8c8c8c; stroke-width: 0; }\n  .sortLaneLevel1Text { font-family: Verdana; font-size: 9px; font-weight: normal; text-anchor: left; }\n  .mainLaneText { font-family: Verdana; font-size: 9px; font-weight: normal; text-anchor: middle; }\n  .nameTxtInner {font-family: Verdana; font-size: 9px; font-weight: normal; text-anchor: middle; fill: var(--dws-procmon-inner-name, #333333)  }\n  .nameTxtOuter {font-family: Verdana; font-size: 9px; font-weight: normal; text-anchor: middle; fill: var(--dws-procmon-outer-name, #d7c77e)  }\n  .infoText { fill: var(--dws-procmon-info-txt, #d7c77e) }\n  .warnText { fill: var(--dws-procmon-warn-txt, #ffff00) }\n  .errText { fill: var(--dws-procmon-err-txt, #f62323) }\n  .lane { fill: var(--dws-procmon-lane-fill, #f2f2f2); stroke: #f2f2f2; stroke-width: 0; }\n  .scannerIdle { stroke: var(--dws-scan-stroke-idle, #f2f2f2); stroke-width: 1.5; }\n  .scannerActive { stroke: var(--dws-scan-stroke-active, #ff0000); stroke-width: 0.5; }\n  .warningSymbol { fill: transparent; stroke: var(--dws-scan-warn-symbol, #ffff00); stroke-width: 1;}\n  .errorSymbol { fill: transparent; stroke: var(--dws-scan-err-symbol, #f62323); stroke-width: 2;}\n  .okSymbol { fill: transparent; stroke: var(--dws-scan-ok-symbol, #37b332); stroke-width: 1;}\n  .idleSymbol { fill: transparent; stroke: var(--dws-scan-idle-symbol, #008ae6); stroke-width: 1;}\n</style>\n<rect x=\"0\" y=\"0\" width=\"560\" height=\"142\" class=\"dws-procmon-container\"/>\n<svg x=\"10\" y=\"10\" width=\"540\" height=\"122\" viewBox=\"-2 -2 540 120\">\n  <defs>\n  <!-- Scan table -->\n    <g id=\"scanTable\">\n      <rect x=\"0\" y=\"0\" width=\"28\" height=\"18\" class=\"lane\"/>\n      <line x1=\"4\" x2=\"24\" y1=\"-3\" y2=\"-3\" class=\"scannerIdle\"/>\n      <line x1=\"4\" x2=\"24\" y1=\"21\" y2=\"21\" class=\"scannerIdle\"/>\n    </g>\n    <g id=\"scanTableActive\">\n      <line x1=\"22\" x2=\"22\" y1=\"-1\" y2=\"19\" class=\"scannerActive\"/>\n      <line x1=\"20\" x2=\"20\" y1=\"-1\" y2=\"19\" class=\"scannerActive\"/>\n      <line x1=\"18\" x2=\"18\" y1=\"-1\" y2=\"19\" class=\"scannerActive\"/>\n      <line x1=\"16\" x2=\"16\" y1=\"-1\" y2=\"19\" class=\"scannerActive\"/>\n      <line x1=\"14\" x2=\"14\" y1=\"-1\" y2=\"19\" class=\"scannerActive\"/>\n      <line x1=\"12\" x2=\"12\" y1=\"-1\" y2=\"19\" class=\"scannerActive\"/>\n      <line x1=\"10\" x2=\"10\" y1=\"-1\" y2=\"19\" class=\"scannerActive\"/>\n      <line x1=\"8\" x2=\"8\" y1=\"-1\" y2=\"19\" class=\"scannerActive\"/>\n      <line x1=\"6\" x2=\"6\" y1=\"-1\" y2=\"19\" class=\"scannerActive\"/>\n    </g>\n    <!-- Straight lane segment -->\n    <g id=\"straightLaneSegment\">\n      <rect x=\"0\" y=\"0\" width=\"36\" height=\"18\" class=\"lane\"/>\n    </g>\n    <!-- Straight lane symbols - in part also used for diverters and the scan table -->\n    <polygon id=\"straightLaneRun\" points=\"0,9 4,3 4,6 15,6 15,12 4,12 4,15\" class=\"okSymbol\"/>\n    <g id=\"straightLaneStop\">\n      <line x1=\"0\" x2=\"0\" y1=\"3\" y2=\"15\" class=\"idleSymbol\"/>\n      <line x1=\"6\" x2=\"6\" y1=\"3\" y2=\"15\" class=\"idleSymbol\"/>\n    </g>\n    <g id=\"straightLaneDropOff\">\n      <line x1=\"0\" x2=\"36\" y1=\"18\" y2=\"18\" class=\"warningSymbol\"/>\n      <polygon points=\"13,21 23,21 23,26 28,26 18,33 8,26 13,26\" class=\"warningSymbol\" />\n    </g>\n    <g id=\"straightLaneDropOn\">\n      <line x1=\"0\" x2=\"36\" y1=\"18\" y2=\"18\" class=\"warningSymbol\"/>\n      <polygon points=\"13,33 23,33 23,28 28,28 18,21 8,28 13,28\" class=\"warningSymbol\" />\n    </g>\n    <g id=\"straightLaneNoConnect\">\n      <line x1=\"0\" x2=\"6\" y1=\"3\" y2=\"15\" class=\"errorSymbol\"/>\n      <line x1=\"0\" x2=\"6\" y1=\"15\" y2=\"3\" class=\"errorSymbol\"/>\n    </g>\n    <!-- Diverter -->\n    <g id=\"diverter\">\n      <rect x=\"0\" y=\"0\" width=\"18\" height=\"18\" class=\"lane\"/>\n    </g>\n    <polygon id=\"diverterStraightRun\" points=\"4,9 8,3 8,6 14,6 14,12 8,12 8,15\" class=\"okSymbol\"/>\n    <polygon id=\"diverterRightRun\" points=\"9,4 3,8 6,8 6,14 12,14 12,8 15,8\" class=\"okSymbol\"/>\n    <polygon id=\"diverterLeftRun\" points=\"9,14 3,10 6,10 6,4 12,4 12,10 15,10\" class=\"okSymbol\"/>\n    <!-- Level 1 right sort lane, incl. symbols -->\n    <g id=\"sortLaneRightLevel1\">\n      <polygon points=\"0,0 18,0 0,-48 -18,-48\" class=\"lane\"/>\n    </g>\n    <polygon id=\"sortLaneRightlevel1Run\" points=\"0.13,-15.8 -4,-26.1 -6.8,-25 -2.6,-30.9 4.4,-29.3 1.6,-28.2  5.5,-17.9\" class=\"okSymbol\"/>\n    <g id=\"sortLaneRightLevel1Stop\">\n      <line x1=\"-2.5\" x2=\"-2.5\" y1=\"-29\" y2=\"-17\" class=\"idleSymbol\"/>\n      <line x1=\"3.5\" x2=\"3.5\" y1=\"-29\" y2=\"-17\" class=\"idleSymbol\"/>\n    </g>\n    <g id=\"sortLaneRightLevel1NoConnect\">\n      <line x1=\"-2.5\" x2=\"3.5\" y1=\"-29\" y2=\"-17\" class=\"errorSymbol\"/>\n      <line x1=\"-2.5\" x2=\"3.5\" y1=\"-17\" y2=\"-29\" class=\"errorSymbol\"/>\n    </g>\n    <!-- Level 1 left sort lane, incl. symbols -->\n    <g id=\"sortLaneLeftLevel1\">\n      <polygon points=\"0,0 18,0 0,48 -18,48\" class=\"lane\"/>\n    </g>\n    <polygon id=\"sortLaneLeftLevel1Run\" points=\"0.13,15.8 -4,26.1 -6.8,25 -2.6,30.9 4.4,29.3 1.6,28.2 5.5,17.9\" class=\"okSymbol\"/>\n    <g id=\"sortLaneLeftLevel1Stop\">\n      <line x1=\"-2.5\" x2=\"-2.5\" y1=\"29\" y2=\"17\" class=\"idleSymbol\"/>\n      <line x1=\"3.5\" x2=\"3.5\" y1=\"29\" y2=\"17\" class=\"idleSymbol\"/>\n    </g>\n    <g id=\"sortLaneLeftLevel1NoConnect\">\n      <line x1=\"-2.5\" x2=\"3.5\" y1=\"29\" y2=\"17\" class=\"errorSymbol\"/>\n      <line x1=\"-2.5\" x2=\"3.5\" y1=\"17\" y2=\"29\" class=\"errorSymbol\"/>\n    </g>\n  </defs>\n\n  <use href=\"#straightLaneSegment\" x=\"0\" y=\"50\" />\n  <text x=\"18\" y=\"46\" class=\"mainLaneText\" ng-class=\"{infoText:dwsSystem.infeedTables[0].laneSegments[2].txtType==='i', warnText:dwsSystem.infeedTables[0].laneSegments[2].txtType==='w', errText:dwsSystem.infeedTables[0].laneSegments[2].txtType==='e'}\">{{ dwsSystem.infeedTables[0].laneSegments[2].txt }}</text>\n  <text x=\"18\" y=\"78\" class=\"nameTxtOuter\">{{ dwsSystem.infeedTables[0].laneSegments[2].name }}</text>\n      <use href=\"#straightLaneRun\" x=\"10\" y=\"50\" ng-show=\"dwsSystem.infeedTables[0].laneSegments[2].run\"/>\n  <use href=\"#straightLaneStop\" x=\"15\" y=\"50\" ng-show=\"dwsSystem.infeedTables[0].laneSegments[2].stop\"/>\n      <use href=\"#straightLaneDropOff\" x=\"0\" y=\"50\" ng-show=\"dwsSystem.infeedTables[0].laneSegments[2].dropOff\"/>\n  <use href=\"#straightLaneDropOn\" x=\"0\" y=\"50\" ng-show=\"dwsSystem.infeedTables[0].laneSegments[2].dropOn\"/>\n  <use href=\"#straightLaneNoConnect\" x=\"15\" y=\"50\" ng-show=\"(dwsSystem.infeedTables[0].laneSegments[2].noConnect || dwsSystem.infeedTables[0].laneSegments[2].congested)\"/>\n          \n  <use href=\"#straightLaneSegment\" x=\"38\" y=\"50\" />\n  <text x=\"56\" y=\"46\" class=\"mainLaneText\" ng-class=\"{infoText:dwsSystem.infeedTables[0].laneSegments[1].txtType==='i', warnText:dwsSystem.infeedTables[0].laneSegments[1].txtType==='w', errText:dwsSystem.infeedTables[0].laneSegments[1].txtType==='e'}\">{{ dwsSystem.infeedTables[0].laneSegments[1].txt }}</text>\n  <text x=\"56\" y=\"78\" class=\"nameTxtOuter\">{{ dwsSystem.infeedTables[0].laneSegments[1].name }}</text>\n      <use href=\"#straightLaneRun\" x=\"48\" y=\"50\" ng-show=\"dwsSystem.infeedTables[0].laneSegments[1].run\"/>\n  <use href=\"#straightLaneStop\" x=\"53\" y=\"50\" ng-show=\"dwsSystem.infeedTables[0].laneSegments[1].stop\"/>\n      <use href=\"#straightLaneDropOff\" x=\"38\" y=\"50\" ng-show=\"dwsSystem.infeedTables[0].laneSegments[1].dropOff\"/>\n  <use href=\"#straightLaneDropOn\" x=\"38\" y=\"50\" ng-show=\"dwsSystem.infeedTables[0].laneSegments[1].dropOn\"/>\n  <use href=\"#straightLaneNoConnect\" x=\"53\" y=\"50\" ng-show=\"(dwsSystem.infeedTables[0].laneSegments[1].noConnect || dwsSystem.infeedTables[0].laneSegments[1].congested)\"/>\n          \n  <use href=\"#straightLaneSegment\" x=\"76\" y=\"50\" />\n  <text x=\"94\" y=\"46\" class=\"mainLaneText\" ng-class=\"{infoText:dwsSystem.infeedTables[0].laneSegments[0].txtType==='i', warnText:dwsSystem.infeedTables[0].laneSegments[0].txtType==='w', errText:dwsSystem.infeedTables[0].laneSegments[0].txtType==='e'}\">{{ dwsSystem.infeedTables[0].laneSegments[0].txt }}</text>\n  <text x=\"94\" y=\"78\" class=\"nameTxtOuter\">{{ dwsSystem.infeedTables[0].laneSegments[0].name }}</text>\n      <use href=\"#straightLaneRun\" x=\"86\" y=\"50\" ng-show=\"dwsSystem.infeedTables[0].laneSegments[0].run\"/>\n  <use href=\"#straightLaneStop\" x=\"91\" y=\"50\" ng-show=\"dwsSystem.infeedTables[0].laneSegments[0].stop\"/>\n      <use href=\"#straightLaneDropOff\" x=\"76\" y=\"50\" ng-show=\"dwsSystem.infeedTables[0].laneSegments[0].dropOff\"/>\n  <use href=\"#straightLaneDropOn\" x=\"76\" y=\"50\" ng-show=\"dwsSystem.infeedTables[0].laneSegments[0].dropOn\"/>\n  <use href=\"#straightLaneNoConnect\" x=\"91\" y=\"50\" ng-show=\"(dwsSystem.infeedTables[0].laneSegments[0].noConnect || dwsSystem.infeedTables[0].laneSegments[0].congested)\"/>\n          \n  <use href=\"#scanTable\" x=\"114\" y=\"50\" />\n  <text x=\"128\" y=\"42\" class=\"mainLaneText\" ng-class=\"{infoText:dwsSystem.scanTable.txtType==='i', warnText:dwsSystem.infeedTables[0].scanTable.txtType==='w', errText:dwsSystem.infeedTables[0].scanTable.txtType==='e'}\">{{ dwsSystem.infeedTables[0].scanTable.txt }}</text>\n  <text x=\"128\" y=\"82\" class=\"nameTxtOuter\">{{ dwsSystem.infeedTables[0].scanTable.name }}</text>\n  <use href=\"#scanTableActive\" x=\"114\" y=\"50\" ng-show=\"dwsSystem.infeedTables[0].scanTable.trigger\"/>\n  <use href=\"#straightLaneRun\" x=\"121\" y=\"50\" ng-show=\"dwsSystem.infeedTables[0].scanTable.run\"/>\n  <use href=\"#straightLaneStop\" x=\"125\" y=\"50\" ng-show=\"dwsSystem.infeedTables[0].scanTable.stop\"/>\n  <use href=\"#straightLaneNoConnect\" x=\"125\" y=\"50\" ng-show=\"dwsSystem.infeedTables[0].scanTable.noConnect\"/>\n  \n  <use href=\"#straightLaneSegment\" x=\"144\" y=\"50\" />\n  <text x=\"162\" y=\"46\" class=\"mainLaneText\" ng-class=\"{infoText:dwsSystem.infeedTables[0].infeedTable[2].txtType==='i', warnText:dwsSystem.infeedTables[0].infeedTable[2].txtType==='w', errText:dwsSystem.infeedTables[0].infeedTable[2].txtType==='e'}\">{{ dwsSystem.infeedTables[0].infeedTable[2].txt }}</text>\n  <text x=\"162\" y=\"78\" class=\"nameTxtOuter\">{{ dwsSystem.infeedTables[0].infeedTable[2].name }}</text>\n  <use href=\"#straightLaneRun\" x=\"154\" y=\"50\" ng-show=\"dwsSystem.infeedTables[0].infeedTable[2].run\"/>\n  <use href=\"#straightLaneStop\" x=\"159\" y=\"50\" ng-show=\"dwsSystem.infeedTables[0].infeedTable[2].stop\"/>\n  <use href=\"#straightLaneNoConnect\" x=\"159\" y=\"50\" ng-show=\"dwsSystem.infeedTables[0].infeedTable[2].noConnect\"/>\n    \n  <use href=\"#straightLaneSegment\" x=\"182\" y=\"50\" />\n  <text x=\"200\" y=\"46\" class=\"mainLaneText\" ng-class=\"{infoText:dwsSystem.infeedTables[0].infeedTable[1].txtType==='i', warnText:dwsSystem.infeedTables[0].infeedTable[1].txtType==='w', errText:dwsSystem.infeedTables[0].infeedTable[1].txtType==='e'}\">{{ dwsSystem.infeedTables[0].infeedTable[1].txt }}</text>\n  <text x=\"200\" y=\"78\" class=\"nameTxtOuter\">{{ dwsSystem.infeedTables[0].infeedTable[1].name }}</text>\n  <use href=\"#straightLaneRun\" x=\"192\" y=\"50\" ng-show=\"dwsSystem.infeedTables[0].infeedTable[1].run\"/>\n  <use href=\"#straightLaneStop\" x=\"197\" y=\"50\" ng-show=\"dwsSystem.infeedTables[0].infeedTable[1].stop\"/>\n  <use href=\"#straightLaneNoConnect\" x=\"197\" y=\"50\" ng-show=\"dwsSystem.infeedTables[0].infeedTable[1].noConnect\"/>\n    \n  <use href=\"#straightLaneSegment\" x=\"220\" y=\"50\" />\n  <text x=\"238\" y=\"46\" class=\"mainLaneText\" ng-class=\"{infoText:dwsSystem.infeedTables[0].infeedTable[0].txtType==='i', warnText:dwsSystem.infeedTables[0].infeedTable[0].txtType==='w', errText:dwsSystem.infeedTables[0].infeedTable[0].txtType==='e'}\">{{ dwsSystem.infeedTables[0].infeedTable[0].txt }}</text>\n  <text x=\"238\" y=\"78\" class=\"nameTxtOuter\">{{ dwsSystem.infeedTables[0].infeedTable[0].name }}</text>\n  <use href=\"#straightLaneRun\" x=\"230\" y=\"50\" ng-show=\"dwsSystem.infeedTables[0].infeedTable[0].run\"/>\n  <use href=\"#straightLaneStop\" x=\"235\" y=\"50\" ng-show=\"dwsSystem.infeedTables[0].infeedTable[0].stop\"/>\n  <use href=\"#straightLaneNoConnect\" x=\"235\" y=\"50\" ng-show=\"dwsSystem.infeedTables[0].infeedTable[0].noConnect\"/>\n    \n  <use href=\"#straightLaneSegment\" x=\"278\" y=\"50\" />\n  <text x=\"296\" y=\"46\" class=\"mainLaneText\" ng-class=\"{infoText:dwsSystem.infeedTables[1].laneSegments[2].txtType==='i', warnText:dwsSystem.infeedTables[1].laneSegments[2].txtType==='w', errText:dwsSystem.infeedTables[1].laneSegments[2].txtType==='e'}\">{{ dwsSystem.infeedTables[1].laneSegments[2].txt }}</text>\n  <text x=\"296\" y=\"78\" class=\"nameTxtOuter\">{{ dwsSystem.infeedTables[1].laneSegments[2].name }}</text>\n      <use href=\"#straightLaneRun\" x=\"288\" y=\"50\" ng-show=\"dwsSystem.infeedTables[1].laneSegments[2].run\"/>\n  <use href=\"#straightLaneStop\" x=\"293\" y=\"50\" ng-show=\"dwsSystem.infeedTables[1].laneSegments[2].stop\"/>\n      <use href=\"#straightLaneDropOff\" x=\"278\" y=\"50\" ng-show=\"dwsSystem.infeedTables[1].laneSegments[2].dropOff\"/>\n  <use href=\"#straightLaneDropOn\" x=\"278\" y=\"50\" ng-show=\"dwsSystem.infeedTables[1].laneSegments[2].dropOn\"/>\n  <use href=\"#straightLaneNoConnect\" x=\"293\" y=\"50\" ng-show=\"(dwsSystem.infeedTables[1].laneSegments[2].noConnect || dwsSystem.infeedTables[1].laneSegments[2].congested)\"/>\n          \n  <use href=\"#straightLaneSegment\" x=\"316\" y=\"50\" />\n  <text x=\"334\" y=\"46\" class=\"mainLaneText\" ng-class=\"{infoText:dwsSystem.infeedTables[1].laneSegments[1].txtType==='i', warnText:dwsSystem.infeedTables[1].laneSegments[1].txtType==='w', errText:dwsSystem.infeedTables[1].laneSegments[1].txtType==='e'}\">{{ dwsSystem.infeedTables[1].laneSegments[1].txt }}</text>\n  <text x=\"334\" y=\"78\" class=\"nameTxtOuter\">{{ dwsSystem.infeedTables[1].laneSegments[1].name }}</text>\n      <use href=\"#straightLaneRun\" x=\"326\" y=\"50\" ng-show=\"dwsSystem.infeedTables[1].laneSegments[1].run\"/>\n  <use href=\"#straightLaneStop\" x=\"331\" y=\"50\" ng-show=\"dwsSystem.infeedTables[1].laneSegments[1].stop\"/>\n      <use href=\"#straightLaneDropOff\" x=\"316\" y=\"50\" ng-show=\"dwsSystem.infeedTables[1].laneSegments[1].dropOff\"/>\n  <use href=\"#straightLaneDropOn\" x=\"316\" y=\"50\" ng-show=\"dwsSystem.infeedTables[1].laneSegments[1].dropOn\"/>\n  <use href=\"#straightLaneNoConnect\" x=\"331\" y=\"50\" ng-show=\"(dwsSystem.infeedTables[1].laneSegments[1].noConnect || dwsSystem.infeedTables[1].laneSegments[1].congested)\"/>\n          \n  <use href=\"#straightLaneSegment\" x=\"354\" y=\"50\" />\n  <text x=\"372\" y=\"46\" class=\"mainLaneText\" ng-class=\"{infoText:dwsSystem.infeedTables[1].laneSegments[0].txtType==='i', warnText:dwsSystem.infeedTables[1].laneSegments[0].txtType==='w', errText:dwsSystem.infeedTables[1].laneSegments[0].txtType==='e'}\">{{ dwsSystem.infeedTables[1].laneSegments[0].txt }}</text>\n  <text x=\"372\" y=\"78\" class=\"nameTxtOuter\">{{ dwsSystem.infeedTables[1].laneSegments[0].name }}</text>\n      <use href=\"#straightLaneRun\" x=\"364\" y=\"50\" ng-show=\"dwsSystem.infeedTables[1].laneSegments[0].run\"/>\n  <use href=\"#straightLaneStop\" x=\"369\" y=\"50\" ng-show=\"dwsSystem.infeedTables[1].laneSegments[0].stop\"/>\n      <use href=\"#straightLaneDropOff\" x=\"354\" y=\"50\" ng-show=\"dwsSystem.infeedTables[1].laneSegments[0].dropOff\"/>\n  <use href=\"#straightLaneDropOn\" x=\"354\" y=\"50\" ng-show=\"dwsSystem.infeedTables[1].laneSegments[0].dropOn\"/>\n  <use href=\"#straightLaneNoConnect\" x=\"369\" y=\"50\" ng-show=\"(dwsSystem.infeedTables[1].laneSegments[0].noConnect || dwsSystem.infeedTables[1].laneSegments[0].congested)\"/>\n          \n  <use href=\"#scanTable\" x=\"392\" y=\"50\" />\n  <text x=\"406\" y=\"42\" class=\"mainLaneText\" ng-class=\"{infoText:dwsSystem.scanTable.txtType==='i', warnText:dwsSystem.infeedTables[1].scanTable.txtType==='w', errText:dwsSystem.infeedTables[1].scanTable.txtType==='e'}\">{{ dwsSystem.infeedTables[1].scanTable.txt }}</text>\n  <text x=\"406\" y=\"82\" class=\"nameTxtOuter\">{{ dwsSystem.infeedTables[1].scanTable.name }}</text>\n  <use href=\"#scanTableActive\" x=\"392\" y=\"50\" ng-show=\"dwsSystem.infeedTables[1].scanTable.trigger\"/>\n  <use href=\"#straightLaneRun\" x=\"399\" y=\"50\" ng-show=\"dwsSystem.infeedTables[1].scanTable.run\"/>\n  <use href=\"#straightLaneStop\" x=\"403\" y=\"50\" ng-show=\"dwsSystem.infeedTables[1].scanTable.stop\"/>\n  <use href=\"#straightLaneNoConnect\" x=\"403\" y=\"50\" ng-show=\"dwsSystem.infeedTables[1].scanTable.noConnect\"/>\n  \n  <use href=\"#straightLaneSegment\" x=\"422\" y=\"50\" />\n  <text x=\"440\" y=\"46\" class=\"mainLaneText\" ng-class=\"{infoText:dwsSystem.infeedTables[1].infeedTable[2].txtType==='i', warnText:dwsSystem.infeedTables[1].infeedTable[2].txtType==='w', errText:dwsSystem.infeedTables[1].infeedTable[2].txtType==='e'}\">{{ dwsSystem.infeedTables[1].infeedTable[2].txt }}</text>\n  <text x=\"440\" y=\"78\" class=\"nameTxtOuter\">{{ dwsSystem.infeedTables[1].infeedTable[2].name }}</text>\n  <use href=\"#straightLaneRun\" x=\"432\" y=\"50\" ng-show=\"dwsSystem.infeedTables[1].infeedTable[2].run\"/>\n  <use href=\"#straightLaneStop\" x=\"437\" y=\"50\" ng-show=\"dwsSystem.infeedTables[1].infeedTable[2].stop\"/>\n  <use href=\"#straightLaneNoConnect\" x=\"437\" y=\"50\" ng-show=\"dwsSystem.infeedTables[1].infeedTable[2].noConnect\"/>\n    \n  <use href=\"#straightLaneSegment\" x=\"460\" y=\"50\" />\n  <text x=\"478\" y=\"46\" class=\"mainLaneText\" ng-class=\"{infoText:dwsSystem.infeedTables[1].infeedTable[1].txtType==='i', warnText:dwsSystem.infeedTables[1].infeedTable[1].txtType==='w', errText:dwsSystem.infeedTables[1].infeedTable[1].txtType==='e'}\">{{ dwsSystem.infeedTables[1].infeedTable[1].txt }}</text>\n  <text x=\"478\" y=\"78\" class=\"nameTxtOuter\">{{ dwsSystem.infeedTables[1].infeedTable[1].name }}</text>\n  <use href=\"#straightLaneRun\" x=\"470\" y=\"50\" ng-show=\"dwsSystem.infeedTables[1].infeedTable[1].run\"/>\n  <use href=\"#straightLaneStop\" x=\"475\" y=\"50\" ng-show=\"dwsSystem.infeedTables[1].infeedTable[1].stop\"/>\n  <use href=\"#straightLaneNoConnect\" x=\"475\" y=\"50\" ng-show=\"dwsSystem.infeedTables[1].infeedTable[1].noConnect\"/>\n    \n  <use href=\"#straightLaneSegment\" x=\"498\" y=\"50\" />\n  <text x=\"516\" y=\"46\" class=\"mainLaneText\" ng-class=\"{infoText:dwsSystem.infeedTables[1].infeedTable[0].txtType==='i', warnText:dwsSystem.infeedTables[1].infeedTable[0].txtType==='w', errText:dwsSystem.infeedTables[1].infeedTable[0].txtType==='e'}\">{{ dwsSystem.infeedTables[1].infeedTable[0].txt }}</text>\n  <text x=\"516\" y=\"78\" class=\"nameTxtOuter\">{{ dwsSystem.infeedTables[1].infeedTable[0].name }}</text>\n  <use href=\"#straightLaneRun\" x=\"508\" y=\"50\" ng-show=\"dwsSystem.infeedTables[1].infeedTable[0].run\"/>\n  <use href=\"#straightLaneStop\" x=\"513\" y=\"50\" ng-show=\"dwsSystem.infeedTables[1].infeedTable[0].stop\"/>\n  <use href=\"#straightLaneNoConnect\" x=\"513\" y=\"50\" ng-show=\"dwsSystem.infeedTables[1].infeedTable[0].noConnect\"/>\n    \n  </svg>\n  </svg>\n\n  </svg>\n  </div>\n  </div>\n  ",
      "storeOutMessages": false,
      "fwdInMessages": false,
      "resendOnRefresh": false,
      "templateScope": "local",
      "x": 1720,
      "y": 220,
      "wires": [
          []
      ]
  },
  {
      "id": "851e490f0db2b80d",
      "type": "ui_template",
      "z": "be047adf.efd448",
      "g": "8107ad0873d7290c",
      "group": "ae55bf81.f045c",
      "name": "Dimensions and weight",
      "order": 1,
      "width": 3,
      "height": 9,
      "format": "<link rel=\"stylesheet\" type=\"text/css\" href=\"/scaletronic-dws.css\">\n<div class=\"dws-rounded-box dws-box-spacer\">\n  <div class=\"dws-data-header\">{{ dataHeaders.dimensions.lengthHeader }}</div>\n  <div class=\"dws-data-frame\">\n    <div ng-show=\"!dataObject.hasData || dataObject.dimensions.lengthIsGood && dataObject.dimensions.length\" ng-class=\"{'dws-check-mark dws-check-mark-good':dataObject.hasData, 'dws-check-mark dws-check-mark-pending':!dataObject.hasData}\"><i class=\"fa fa-check\"></i></div>\n    <div ng-show=\"dataObject.hasData && !dataObject.dimensions.lengthIsGood && dataObject.dimensions.length\" class=\"dws-check-mark dws-check-mark-bad\"><i class=\"fa fa-close\"></i></div>\n    <div ng-class=\"{'dws-data dws-good-data':(dataObject.dimensions.lengthIsGood || !dataObject.hasData), 'dws-data dws-bad-data':(!dataObject.dimensions.lengthIsGood && dataObject.hasData)}\">{{ dataObject.dimensions.length }}</div>\n    <div class=\"dws-unit\">{{ dataHeaders.units.dimension }}</div>\n  </div>\n  <div class=\"dws-data-header\">{{ dataHeaders.dimensions.widthHeader }}</div>\n  <div class=\"dws-data-frame\">\n    <div ng-show=\"!dataObject.hasData || dataObject.dimensions.widthIsGood && dataObject.dimensions.width\" ng-class=\"{'dws-check-mark dws-check-mark-good':dataObject.hasData, 'dws-check-mark dws-check-mark-pending':!dataObject.hasData}\"><i class=\"fa fa-check\"></i></div>\n    <div ng-show=\"dataObject.hasData && !dataObject.dimensions.widthIsGood && dataObject.dimensions.width\" class=\"dws-check-mark dws-check-mark-bad\"><i class=\"fa fa-close\"></i></div>\n    <div ng-class=\"{'dws-data dws-good-data':(dataObject.dimensions.widthIsGood || !dataObject.hasData), 'dws-data dws-bad-data':(!dataObject.dimensions.widthIsGood && dataObject.hasData)}\">{{ dataObject.dimensions.width }}</div>\n    <div class=\"dws-unit\">{{ dataHeaders.units.dimension }}</div>\n  </div>\n  <div class=\"dws-data-header\">{{ dataHeaders.dimensions.heightHeader }}</div>\n  <div class=\"dws-data-frame\">\n    <div ng-show=\"!dataObject.hasData || dataObject.dimensions.heightIsGood && dataObject.dimensions.height\" ng-class=\"{'dws-check-mark dws-check-mark-good':dataObject.hasData, 'dws-check-mark dws-check-mark-pending':!dataObject.hasData}\"><i class=\"fa fa-check\"></i></div>\n    <div ng-show=\"dataObject.hasData && !dataObject.dimensions.heightIsGood && dataObject.dimensions.height\" class=\"dws-check-mark dws-check-mark-bad\"><i class=\"fa fa-close\"></i></div>\n    <div ng-class=\"{'dws-data dws-good-data':(dataObject.dimensions.heightIsGood || !dataObject.hasData), 'dws-data dws-bad-data':(!dataObject.dimensions.heightIsGood && dataObject.hasData)}\">{{ dataObject.dimensions.height }}</div>\n    <div class=\"dws-unit\">{{ dataHeaders.units.dimension }}</div>\n  </div>\n</div>\n<div class=\"dws-rounded-box dws-box-spacer\">\n  <div class=\"dws-data-header\">{{ dataHeaders.dimensions.volumeHeader }}</div>\n  <div class=\"dws-data-frame\">\n    <div ng-show=\"!dataObject.hasData || dataObject.dimensions.volumeIsGood && dataObject.dimensions.volume\" ng-class=\"{'dws-check-mark dws-check-mark-good':dataObject.hasData, 'dws-check-mark dws-check-mark-pending':!dataObject.hasData}\"><i class=\"fa fa-check\"></i></div>\n    <div ng-show=\"dataObject.hasData && !dataObject.dimensions.volumeIsGood && dataObject.dimensions.volume\" class=\"dws-check-mark dws-check-mark-bad\"><i class=\"fa fa-close\"></i></div>\n    <div ng-class=\"{'dws-data dws-good-data':(dataObject.dimensions.volumeIsGood || !dataObject.hasData), 'dws-data dws-bad-data':(!dataObject.dimensions.volumeIsGood && dataObject.hasData)}\">{{ dataObject.dimensions.volume }}</div>\n    <div class=\"dws-unit\">{{ dataHeaders.units.volume }}</div>\n  </div>\n</div>\n<div class=\"dws-rounded-box\">\n  <div class=\"dws-data-header\">{{ dataHeaders.weight.weightHeader }}</div>\n  <div class=\"dws-data-frame\">\n    <div ng-show=\"!dataObject.hasData || dataObject.weight.weightIsGood && dataObject.weight.weight\" ng-class=\"{'dws-check-mark dws-check-mark-good':dataObject.hasData, 'dws-check-mark dws-check-mark-pending':!dataObject.hasData}\"><i class=\"fa fa-check\"></i></div>\n    <div ng-show=\"dataObject.hasData && !dataObject.weight.weightIsGood && dataObject.weight.weight\" class=\"dws-check-mark dws-check-mark-bad\"><i class=\"fa fa-close\"></i></div>\n    <div ng-class=\"{'dws-data dws-good-data':(dataObject.weight.weightIsGood || !dataObject.hasData), 'dws-data dws-bad-data':(!dataObject.weight.weightIsGood && dataObject.hasData)}\">{{ dataObject.weight.weight }}</div>\n    <div class=\"dws-unit\">{{ dataHeaders.units.weight }}</div>\n  </div>\n  <div class=\"dws-data-header\">{{ dataHeaders.weight.volWeightHeader }}</div>\n  <div class=\"dws-data-frame\">\n    <div ng-show=\"!dataObject.hasData || dataObject.weight.volumeWeightIsGood && dataObject.weight.volumeWeight\" ng-class=\"{'dws-check-mark dws-check-mark-good':dataObject.hasData, 'dws-check-mark dws-check-mark-pending':!dataObject.hasData}\"><i class=\"fa fa-check\"></i></div>\n    <div ng-show=\"dataObject.hasData && !dataObject.weight.volumeWeightIsGood && dataObject.weight.volumeWeight\" class=\"dws-check-mark dws-check-mark-bad\"><i class=\"fa fa-close\"></i></div>\n    <div ng-class=\"{'dws-data dws-good-data':(dataObject.weight.volumeWeightIsGood || !dataObject.hasData), 'dws-data dws-bad-data':(!dataObject.weight.volumeWeightIsGood && dataObject.hasData)}\">{{ dataObject.weight.volumeWeight }}</div>\n    <div class=\"dws-unit\">{{ dataHeaders.units.weight }}</div>\n  </div>\n</div>\n\n<script>\n(function(scope) {\nconst filterScanSource = localStorage.getItem('filterScanSource') || ''\n/**\n * Statis texts for data headers for the DWS dashboard.\n */\nscope.dataHeaders = {\n  packageCodes: {\n    noOfCodes: 0,\n    headers: []\n  },\n  sorting : {\n    header: ''\n  },\n  weight: {\n    weightHeader: '',\n    volWeightHeader: '',\n  },\n  dimensions: {\n    lengthHeader: '',\n    widthHeader: '',\n    heightHeader: '',\n    volumeHeader: '',\n  },\n  images: {\n    noOfImages: 0,\n  },\n  units: {\n    dimension: '',\n    volume: '',\n    weight: ''\n  },\n  status: {\n    error: '',\n    sorting: '',\n    datatransfer: '',\n    imagetransfer: ''\n  },\n  statistics: {\n    throughput: '',\n    errorRate: '',\n    lastReset: '',\n    firstPackage: '',\n    totalPackages: '',\n    errorPackages: '',\n    avgPerHour: '',\n    avgErrorRate: ''\n  }\n};\n\n/**\n * Data object used for mapping and transferring package\n * data to the DWS dashboard.\n */\nscope.dataObject = {\n  hasData: false,\n  corrId: -1,\n  scanDate: '',\n  scanTime: '',\n  packageIds: {\n    noOfIds: 0,\n    ids: [],\n    good: []\n  },\n  sorting : {\n    sortPath: '',\n    good: false\n  },\n  weight: {\n    weight: '',\n    volumeWeight: '',\n    weightIsGood: false,\n    volumeWeightIsGood: false\n  },\n  dimensions: {\n    length: '',\n    width: '',\n    height: '',\n    volume: '',\n    lengthIsGood: false,\n    widthIsGood: false,\n    heightIsGood: false,\n    volumeIsGood: false\n  },\n  images: {\n    noOfImages: 0,\n    images: [],\n    good: []\n  },\n  completion: {\n    sorting: {\n      isSorted: false,\n      timestamp: '',\n      error: false,\n      statusTxt: ''\n    },\n    datatransfer: {\n      isTransferred: false,\n      timestamp: '',\n      error: false,\n      statusTxt: ''\n    },\n    imagetransfer: {\n      isTransferred: false,\n      timestamp: '',\n      error: false,\n      statusTxt: ''\n    }\n  },\n  isDataError: false,\n  statusTxt: {\n    short: '',\n    full: ''\n  },\n};\n\nscope.$watch(\"msg\", (msg) => {\n  if(msg) {\n    // Update displayed status when a data update is received\n    if (msg.topic === 'uiDataheaders') {\n      scope.dataHeaders = msg.payload;\n    }\n    else if (msg.topic === 'uiData') {\n      if (filterScanSource && msg.payload.scanSource != filterScanSource) {\n        return\n      }\n      scope.dataObject = msg.payload;\n    }\n    else if (msg.topic === 'uiDataUpdate' && scope.dataObject.corrId == msg.payload.corrId) {\n      if (filterScanSource && msg.payload.scanSource != filterScanSource) {\n        return\n      }\n      scope.dataObject = msg.payload;\n    }\n  }\n});\n})(scope);\n</script>\n",
      "storeOutMessages": false,
      "fwdInMessages": false,
      "resendOnRefresh": false,
      "templateScope": "local",
      "x": 1750,
      "y": 100,
      "wires": [
          []
      ]
  },
  {
      "id": "96fa1af074c20f9f",
      "type": "dashboardDataBroker",
      "z": "be047adf.efd448",
      "g": "8107ad0873d7290c",
      "name": "UI Data Broker",
      "statusBroker": "5648aea3.4ed66",
      "sysConfig": "1642737a.30dccd",
      "dimensionUnit": "mm",
      "volumeUnit": "cm3",
      "weightUnit": "g",
      "noOfPackageIds": "3",
      "packageId1Heading": "Package id",
      "packageId2Heading": "Barcode 1",
      "packageId3Heading": "Barcode 2",
      "sortPathHeader": "Sort lane",
      "emptySortPathDisplayName": "None",
      "weightHeader": "Weight",
      "volumeWeightHeader": "Volume weight",
      "lengthHeader": "Length",
      "widthHeader": "Width",
      "heightHeader": "Height",
      "volumeHeader": "Volume",
      "noOfImages": "3",
      "imagePath": "/images",
      "defaultImageUrl": "/no-image.png",
      "errorHeader": "Error",
      "sortingHeader": "Sorting",
      "datatransferHeader": "Data transfer",
      "imagetransferHeader": "Image transfer",
      "throughputHeader": "Throughput (per hour)",
      "errorRateHeader": "Error rate (%)",
      "lastResetHeader": "Last reset",
      "firstPackageHeader": "First package",
      "totalPackagesHeader": "Total packages",
      "errorPackagesHeader": "Errors",
      "avgPerHourHeader": "Avg. packages/hour",
      "avgErrorRateHeader": "Avg. error rate",
      "dataOkShortText": "Data is ok",
      "sortingOkShortText": "Sorting completed",
      "datatransferOkShortText": "Data transfer ok",
      "imagetransferOkShortText": "Image transfer ok",
      "packageCodeErrShortText": "No barcode",
      "sortPathErrShortText": "No sort path",
      "dimensionErrShortText": "No dimensions",
      "weightErrShortText": "No weight",
      "imageErrShortText": "No images",
      "noOfLogRecords": "10000",
      "outputs": 1,
      "x": 1500,
      "y": 60,
      "wires": [
          [
              "851e490f0db2b80d",
              "9095bbc74a4ab77e",
              "2e648283d8aaec5f",
              "3106ac60b5b931b8"
          ]
      ]
  },
  {
      "id": "baba6b48d0d5b41d",
      "type": "ui_template",
      "z": "be047adf.efd448",
      "g": "8107ad0873d7290c",
      "group": "8efe9fc5.d684b8",
      "name": "Title bar",
      "order": 1,
      "width": "5",
      "height": 2,
      "format": "<link rel=\"stylesheet\" type=\"text/css\" href=\"/scaletronic-dws.css\" />\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/dws-spinner.css\">\n<div class=\"dws-titlebar\">\n  <div class=\"dws-toolbar-button\" ng-click=\"openOptionsDialog()\"><i class=\"fa fa-cog\"></i></div>\n  <img src=\"/Scaletronic-logo-light.png\" alt=\"Scaletronic logo\" style=\"width:400px;height:auto;\" />\n</div>\n\n<!-- Show startup screen until we believe everything has been initialized -->\n<div class=\"dws-init-wrapper\"\n  ng-class=\"{'dws-init-screen':initialized, 'dws-init-screen dws-init-screen-show':!initialized}\">\n  <div class=\"dws-loader-wrapper\">\n    <div class=\"loader\">\n      <div class=\"face\">\n        <div class=\"circle\"></div>\n      </div>\n      <div class=\"face\">\n        <div class=\"circle\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<!-- Options dialog -->\n<div ng-class=\"{'modal':!showOptionsDialog, 'modal show-modal modal-layer-options':showOptionsDialog}\"\n  ng-click=\"closeOptionsDialog()\">\n  <div class=\"modal-content-options\" ng-click=\"$event.stopPropagation()\">\n    <span class=\"close-button\" ng-click=\"closeOptionsDialog()\">&times;</span>\n    <!-- Dialog title bar -->\n    <div class=\"dws-options-dialog-header-row\">\n      <div class=\"dws-dialog-header\">Options</div>\n    </div>\n\n    <div class=\"dws-options-dialog-row\">\n\n      <div>\n        <div class=\"dws-option-header\">Theme</div>\n        <div class=\"dws-option-frame\">\n          <div class=\"dws-option\">\n            <input type=\"radio\" id=\"dwsDarkTheme\" name=\"dwsTheme\" value=\"dark\" ng-click=\"selectTheme()\" />\n            <label for=\"dwsDarkTheme\" class=\"dws-option-label\">&nbsp;Dark theme</label>\n          </div>\n          <div class=\"dws-option\">\n            <input type=\"radio\" id=\"dwsLightTheme\" name=\"dwsTheme\" value=\"light\" ng-click=\"selectTheme()\" />\n            <label for=\"dwsLightTheme\" class=\"dws-option-label\">&nbsp;Light theme</label>\n          </div>\n        </div>\n      </div>\n\n      <div>\n        <div class=\"dws-option-header\">Process monitor</div>\n        <div class=\"dws-option-frame\">\n          <div class=\"dws-option\">\n            <select id=\"dws-processmon-end-segm-unit\" class=\"dws-option-select\" ng-model=\"procmonSelectEndUnit\"\n              ng-change=\"changeProcessmonUnits()\">\n              <option value=\"volume\">Volume</option>\n              <option value=\"weight\">Weight</option>\n              <option value=\"package_count\">Number of packages</option>\n              <option value=\"nothing\">Nothing</option>\n            </select>\n            <label for=\"dws-processmon-end-segm-unit\" class=\"dws-option-label\">&nbsp;End segment units</label>\n          </div>\n          <div class=\"dws-option\">\n            <select id=\"dws-processmon-lane-unit\" class=\"dws-option-select\" ng-model=\"procmonSelectLaneUnit\"\n              ng-change=\"changeProcessmonUnits()\">\n              <option value=\"volume\">Volume</option>\n              <option value=\"weight\">Weight</option>\n              <option value=\"package_count\">Number of packages</option>\n              <option value=\"nothing\">Nothing</option>\n            </select>\n            <label for=\"dws-processmon-lane-unit\" class=\"dws-option-label\">&nbsp;Lane units</label>\n          </div>\n          <div class=\"dws-option\">\n            <div\n              ng-class=\"{'dws-simple-button':procmonUnitsChanged, 'dws-simple-button dws-disabled':!procmonUnitsChanged}\"\n              ng-click=\"saveProcessmonUnits()\">Save process monitor changes</div>\n          </div>\n          <div class=\"dws-option\" ng-show=\"enableResetEndsegmStats\">\n            <div class=\"dws-simple-button\" ng-click=\"openClearProcmonConfirmDialog()\">Reset process monitor statistics\n            </div>\n          </div>\n          <div class=\"dws-option\" ng-show=\"enableResetOverallStats\">\n            <div class=\"dws-simple-button\" ng-click=\"openResetAllStatsConfirmDialog()\">Reset all runtime statistics\n            </div>\n          </div>\n        </div>\n      </div>\n\n    </div>\n\n  </div>\n</div>\n\n<!-- Reset process monitor statistics yes/no dialog -->\n<div\n  ng-class=\"{'modal':!showClearProcmonStatsConfirmDialog, 'modal show-modal modal-layer-confirm-dialog':showClearProcmonStatsConfirmDialog}\"\n  ng-click=\"closeClearProcmonConfirmDialog()\">\n  <div class=\"modal-content-confirm-dialog\" ng-click=\"$event.stopPropagation()\">\n    <!-- Confirmation text -->\n    <div class=\"dws-confirm-dialog-text\">\n      Are you sure you want to reset process monitor statistics?\n    </div>\n    <!-- Buttons -->\n    <div class=\"dws-confirm-dialog-button-row\">\n      <div class=\"dws-simple-button\" ng-click=\"clearProcmonStats()\">Yes</div>\n      <div class=\"dws-simple-button\" ng-click=\"closeClearProcmonConfirmDialog()\">No</div>\n    </div>\n  </div>\n</div>\n\n<!-- Reset all runtime statistics yes/no dialog -->\n<div\n  ng-class=\"{'modal':!showResetAllRuntimeStatsConfirmDialog, 'modal show-modal modal-layer-confirm-dialog':showResetAllRuntimeStatsConfirmDialog}\"\n  ng-click=\"closeResetAllStatsConfirmDialog()\">\n  <div class=\"modal-content-confirm-dialog\" ng-click=\"$event.stopPropagation()\">\n    <!-- Confirmation text -->\n    <div class=\"dws-confirm-dialog-text\">\n      Are you sure you want to reset all runtime statistics?\n    </div>\n    <!-- Buttons -->\n    <div class=\"dws-confirm-dialog-button-row\">\n      <div class=\"dws-simple-button\" ng-click=\"resetAllRuntimStats()\">Yes</div>\n      <div class=\"dws-simple-button\" ng-click=\"closeResetAllStatsConfirmDialog()\">No</div>\n    </div>\n  </div>\n</div>\n\n<!-- Confirm close options dialog without saving  -->\n<div\n  ng-class=\"{'modal':!showConfirmCloseNoSaveDialog, 'modal show-modal modal-layer-confirm-dialog':showConfirmCloseNoSaveDialog}\"\n  ng-click=\"closeConfirmCloseNoSaveDialog()\">\n  <div class=\"modal-content-confirm-dialog\" ng-click=\"$event.stopPropagation()\">\n    <!-- Confirmation text -->\n    <div class=\"dws-confirm-dialog-text\">\n      You have unsaved changes. Proceed without saving?\n    </div>\n    <!-- Buttons -->\n    <div class=\"dws-confirm-dialog-button-row\">\n      <div class=\"dws-simple-button\" ng-click=\"doConfirmCloseNoSave()\">Yes</div>\n      <div class=\"dws-simple-button\" ng-click=\"doNotConfirmCloseNoSave()\">No</div>\n    </div>\n  </div>\n</div>\n\n\n<script>\n  (function (scope) {\n    // Pick up scan source to filter for from ?source= and save it to localStorage.filterScanSource\n    const filterScanSource = new URLSearchParams(location.search).get('source')\n    if (filterScanSource) {\n      try {\n        if (filterScanSource == '*') {\n          localStorage.removeItem('filterScanSource')\n        }\n        else {\n          localStorage.setItem('filterScanSource', filterScanSource)\n        }\n      }\n      catch (e) { } // ignore\n    }\n\n    /* Currently selected units for the process monitor */\n    scope.procmonEndSegmentUnit = 'volume';\n    scope.procmonLaneSegmentUnit = 'package_count';\n    /*\n    * Change process monitor units\n    */\n    scope.newProcmonEndSegmentUnit = scope.procmonEndSegmentUnit;\n    scope.newProcmonLaneSegmentUnit = scope.procmonLaneSegmentUnit;\n    scope.procmonUnitsChanged = false;\n    scope.changeProcessmonUnits = () => {\n      scope.newProcmonEndSegmentUnit = document.getElementById('dws-processmon-end-segm-unit').value;\n      scope.newProcmonLaneSegmentUnit = document.getElementById('dws-processmon-lane-unit').value;\n      if (scope.newProcmonEndSegmentUnit !== scope.procmonEndSegmentUnit ||\n        scope.newProcmonLaneSegmentUnit !== scope.procmonLaneSegmentUnit)\n        scope.procmonUnitsChanged = true;\n      else\n        scope.procmonUnitsChanged = false;\n    };\n    scope.saveProcessmonUnits = () => {\n      if (!scope.procmonUnitsChanged)\n        return;\n      let msg = {\n        topic: 'userEvent',\n        payload: {\n          instruction: 'set_procmon_units',\n          value: {\n            endSegmentUnit: scope.newProcmonEndSegmentUnit,\n            laneSegmentUnit: scope.newProcmonLaneSegmentUnit\n          }\n        }\n      };\n      scope.send(msg);\n      scope.procmonEndSegmentUnit = scope.newProcmonEndSegmentUnit;\n      scope.procmonLaneSegmentUnit = scope.newProcmonLaneSegmentUnit;\n      scope.procmonUnitsChanged = false;\n    };\n    /*\n    * Set selected process monitor units\n    */\n    scope.setSelectedProcessmonUnits = () => {\n      document.getElementById('dws-processmon-end-segm-unit').value = scope.procmonEndSegmentUnit;\n      document.getElementById('dws-processmon-lane-unit').value = scope.procmonLaneSegmentUnit;\n      scope.procmonUnitsChanged = false;\n    }\n    scope.setSelectedProcessmonUnits();\n\n\n    /*\n    * Options dialog\n    */\n    scope.showOptionsDialog = false;\n    scope.showOptions = () => {\n    };\n    scope.openOptionsDialog = () => {\n      scope.showOptionsDialog = true;\n    };\n    scope.closeOptionsDialog = (checkChanges = true) => {\n      // Check for config changes\n      if (checkChanges && scope.procmonUnitsChanged)\n        // Save changes?\n        scope.openConfirmCloseNoSaveDialog();\n      else\n        scope.showOptionsDialog = false;\n    };\n\n    /*\n    * Confirm close options dialog without saving\n    */\n    scope.showConfirmCloseNoSaveDialog = false;\n    scope.openConfirmCloseNoSaveDialog = () => {\n      scope.showConfirmCloseNoSaveDialog = true;\n    };\n    scope.closeConfirmCloseNoSaveDialog = () => {\n      scope.showConfirmCloseNoSaveDialog = false;\n    };\n    scope.doConfirmCloseNoSave = () => {\n      scope.setSelectedProcessmonUnits();\n      scope.closeConfirmCloseNoSaveDialog();\n      scope.closeOptionsDialog(false);\n    };\n    scope.doNotConfirmCloseNoSave = () => {\n      scope.closeConfirmCloseNoSaveDialog();\n    };\n\n    /*\n    * Confirm reset process monitor statistics dialog\n    */\n    scope.showClearProcmonStatsConfirmDialog = false;\n    scope.clearProcmonStats = () => {\n      // Send instruction to clear stats\n      let msg = {\n        topic: 'userEvent',\n        payload: {\n          instruction: 'reset_procmon_stats',\n          value: null\n        }\n      };\n      scope.send(msg);\n      scope.closeClearProcmonConfirmDialog();\n    };\n    scope.openClearProcmonConfirmDialog = () => {\n      scope.showClearProcmonStatsConfirmDialog = true;\n    };\n    scope.closeClearProcmonConfirmDialog = () => {\n      scope.showClearProcmonStatsConfirmDialog = false;\n    };\n\n    /*\n    * Confirm reset all runtime statistics dialog\n    */\n    scope.showResetAllRuntimeStatsConfirmDialog = false;\n    scope.resetAllRuntimStats = () => {\n      // Send instruction to reset all runtime stats\n      let msg = {\n        topic: 'userEvent',\n        payload: {\n          instruction: 'reset_stats',\n          value: null\n        }\n      };\n      scope.send(msg);\n      scope.closeResetAllStatsConfirmDialog();\n    };\n    scope.openResetAllStatsConfirmDialog = () => {\n      scope.showResetAllRuntimeStatsConfirmDialog = true;\n    };\n    scope.closeResetAllStatsConfirmDialog = () => {\n      scope.showResetAllRuntimeStatsConfirmDialog = false;\n    };\n\n    /* Current/default theme */\n    scope.currentTheme = 'dark';\n    /*\n     * Check the radio button that corresponds to theme\n     */\n    scope.setSelectedTheme = (theme) => {\n      let dwsThemeRadioBtns = document.getElementsByName('dwsTheme');\n      let noOfBtns = dwsThemeRadioBtns.length;\n      let done = false;\n      for (let i = 0; i < noOfBtns && !done; i++) {\n        if (dwsThemeRadioBtns[i].value === theme) {\n          dwsThemeRadioBtns[i].checked = true;\n          done = true;\n        }\n      }\n    };\n\n    /*\n     * Change theme\n     */\n    scope.selectTheme = () => {\n      // Get the selected option\n      let dwsThemeRadioBtns = document.getElementsByName('dwsTheme');\n      let noOfBtns = dwsThemeRadioBtns.length;\n      let selectedTheme = '';\n      for (let i = 0; i < noOfBtns && !selectedTheme; i++) {\n        if (dwsThemeRadioBtns[i].checked)\n          selectedTheme = dwsThemeRadioBtns[i].value;\n      }\n      if (selectedTheme !== scope.currentTheme) {\n        // An alternate theme has been selected\n        scope.currentTheme = selectedTheme;\n        scope.saveTheme();\n        scope.setTheme(scope.currentTheme);\n      }\n    };\n\n    /*\n    * Set the dashboard theme\n    */\n    scope.setTheme = (theme) => {\n      let root = document.documentElement;\n      if (theme === 'dark') {\n        root.style.setProperty('--dws-container-bg-color', '#333333');\n        root.style.setProperty('--dws-container-border-color', '#333333');\n        root.style.setProperty('--dws-header-color', '#fcfcf8');\n        root.style.setProperty('--dws-text-color', '#fcfcf8');\n        root.style.setProperty('--dws-divider-color', '#d7c77e');\n        /* Data */\n        root.style.setProperty('--dws-good-data-color', '#fcfcf8');\n        root.style.setProperty('--dws-good-data-dimmed-color', '#d7c77e');\n        root.style.setProperty('--dws-bad-data-color', '#ffff00');\n        /* Icon colors */\n        root.style.setProperty('--dws-check-mark-good-color', '#37b332');\n        root.style.setProperty('--dws-check-mark-bad-color', '#ffff00');\n        root.style.setProperty('--dws-check-mark-pending-color', '#737373');\n        /* Tool colors */\n        root.style.setProperty('--dws-tool-button-color', '#fcfcf8');\n        root.style.setProperty('--dws-tool-button-hover-bg-color', '#333333');\n        /* Button colors */\n        root.style.setProperty('--dws-button-color', '#333333');\n        root.style.setProperty('--dws-button-bg-color', '#fcfcf8');\n        root.style.setProperty('--dws-button-hover-bg-color', '#808080');\n        /* Process monitor colors */\n        root.style.setProperty('--dws-procmon-inner-name', '#333333');\n        root.style.setProperty('--dws-procmon-outer-name', '#d7c77e');\n        root.style.setProperty('--dws-procmon-info-txt', '#d7c77e');\n        root.style.setProperty('--dws-procmon-warn-txt', '#ffff00');\n        root.style.setProperty('--dws-procmon-err-txt', '#f62323');\n        root.style.setProperty('--dws-procmon-lane-fill', '#f2f2f2');\n        root.style.setProperty('--dws-scan-stroke-idle', '#f2f2f2');\n        root.style.setProperty('--dws-scan-stroke-active', '#ff0000');\n        root.style.setProperty('--dws-scan-warn-symbol', '#ffff00');\n        root.style.setProperty('--dws-scan-err-symbol', '#f62323');\n        root.style.setProperty('--dws-scan-ok-symbol', '#37b332');\n        root.style.setProperty('--dws-scan-idle-symbol', '#008ae6');\n      } else if (theme === 'light') {\n        root.style.setProperty('--dws-container-bg-color', '#f5f5f5');\n        root.style.setProperty('--dws-container-border-color', '#f5f5f5');\n        root.style.setProperty('--dws-header-color', '#0d0d0d');\n        root.style.setProperty('--dws-text-color', '#0d0d0d');\n        root.style.setProperty('--dws-divider-color', '#62551e');\n        /* Data */\n        root.style.setProperty('--dws-good-data-color', '#0d0d0d');\n        root.style.setProperty('--dws-good-data-dimmed-color', '#62551e');\n        root.style.setProperty('--dws-bad-data-color', '#ff6600');\n        /* Icon colors */\n        root.style.setProperty('--dws-check-mark-good-color', '#37b332');\n        root.style.setProperty('--dws-check-mark-bad-color', '#ff6600');\n        root.style.setProperty('--dws-check-mark-pending-color', '#737373');\n        /* Tool colors */\n        root.style.setProperty('--dws-tool-button-color', '#f5f5f5');\n        root.style.setProperty('--dws-tool-button-hover-bg-color', '#333333');\n        /* Button colors */\n        root.style.setProperty('--dws-button-color', '#f5f5f5');\n        root.style.setProperty('--dws-button-bg-color', '#333333');\n        root.style.setProperty('--dws-button-hover-bg-color', '#666666');\n        /* Process monitor colors */\n        root.style.setProperty('--dws-procmon-inner-name', '#fefefe');\n        root.style.setProperty('--dws-procmon-outer-name', '#62551e');\n        root.style.setProperty('--dws-procmon-info-txt', '#62551e');\n        root.style.setProperty('--dws-procmon-warn-txt', '#ff6600');\n        root.style.setProperty('--dws-procmon-err-txt', '#f62323');\n        root.style.setProperty('--dws-procmon-lane-fill', '#111111');\n        root.style.setProperty('--dws-scan-stroke-idle', '#111111');\n        root.style.setProperty('--dws-scan-stroke-active', '#ff0000');\n        root.style.setProperty('--dws-scan-warn-symbol', '#ff6600');\n        root.style.setProperty('--dws-scan-err-symbol', '#f62323');\n        root.style.setProperty('--dws-scan-ok-symbol', '#37b332');\n        root.style.setProperty('--dws-scan-idle-symbol', '#008ae6');\n      }\n    }\n\n    /*\n    * Save/load the selected theme to/from a cookie\n    */\n    scope.saveTheme = () => {\n      // Set the cookie lifetime to two years. That should be quite sufficient as we intend to refresh the\n      // cookie each time the system is started\n      let exptime = \"expires=\" + (new Date(Date.now() + 63072000000)).toUTCString();\n      document.cookie = 'dwsColorTheme=' + scope.currentTheme + ';' + exptime + ';path=/' + ';SameSite=Strict';\n    };\n    scope.getTheme = () => {\n      let cookieName = 'dwsColorTheme=';\n      let cookieList = decodeURIComponent(document.cookie).split(';');\n      let noOfCookies = cookieList.length;\n      let thisCookie;\n      let value = '';\n      for (let i = 0; i < noOfCookies && !value; i++) {\n        thisCookie = cookieList[i].trim();\n        if (thisCookie.indexOf(cookieName) == 0)\n          // Got the right cookie - return the value\n          value = thisCookie.substring(cookieName.length);\n      }\n      if (value)\n        scope.currentTheme = value;\n      /* Refresh the cookie/set new one */\n      scope.saveTheme();\n      scope.setSelectedTheme(scope.currentTheme);\n      scope.setTheme(scope.currentTheme);\n    };\n    /* Get and set the initial theme and set radio buttons accordingy */\n    scope.getTheme();\n    scope.setSelectedTheme(scope.currentTheme);\n\n    /*\n    * Enable/disable reset statistics buttons\n    */\n    scope.enableResetEndsegmStats = false;\n    scope.enableResetOverallStats = false;\n\n    /*\n    * The initialized flag tells if the template has been initialized. The template\n    * is considered inintialized when the first data package has been received.\n    */\n    scope.initialized = false;\n\n    /*\n    * Data update/message handler\n    */\n    scope.$watch('msg', (msg) => {\n      if (msg) {\n        // Just a little bit more validation (like any) would be proper to do\n        if (msg.topic === 'uiProcmonConfig') {\n          scope.procmonEndSegmentUnit = (msg.payload.hasOwnProperty('endSegmentUnit') && msg.payload.endSegmentUnit) ? msg.payload.endSegmentUnit : scope.procmonEndSegmentUnit;\n          scope.procmonLaneSegmentUnit = (msg.payload.hasOwnProperty('laneSegmentUnit') && msg.payload.laneSegmentUnit) ? msg.payload.laneSegmentUnit : scope.procmonLaneSegmentUnit;\n          scope.setSelectedProcessmonUnits();\n        } else if (msg.topic === 'uiResetStatsConfig') {\n          scope.enableResetEndsegmStats = (msg.payload.hasOwnProperty('allowResetEndsegmStats') && msg.payload.allowResetEndsegmStats !== null) ? msg.payload.allowResetEndsegmStats : scope.enableResetEndsegmStats;\n          scope.enableResetOverallStats = (msg.payload.hasOwnProperty('allowResetOverallStats') && msg.payload.allowResetOverallStats !== null) ? msg.payload.allowResetOverallStats : scope.enableResetOverallStats;\n        }\n      }\n      // Give the UI some time to settle\n      setTimeout(() => {\n        scope.initialized = true\n      }, 2000);\n    });\n  })(scope);\n\n\n</script>\n",
      "storeOutMessages": false,
      "fwdInMessages": false,
      "resendOnRefresh": false,
      "templateScope": "local",
      "x": 1700,
      "y": 260,
      "wires": [
          [
              "24e4fb9f8178380c"
          ]
      ]
  },
  {
      "id": "9095bbc74a4ab77e",
      "type": "ui_template",
      "z": "be047adf.efd448",
      "g": "8107ad0873d7290c",
      "group": "20ceecca.0affb4",
      "name": "Images",
      "order": 2,
      "width": 3,
      "height": 7,
      "format": "<link rel=\"stylesheet\" type=\"text/css\" href=\"/scaletronic-dws.css\">\n<div class=\"dws-rounded-image-box\">\n  <!-- Image 1 - if available -->\n  <div class=\"dws-image-frame\" ng-show=\"dataObject.images.noOfImages\" ng-click=\"showLargeImage(0)\">\n    <img ng-src=\"{{ dataObject.images.images[0] }}\" class=\"dws-image\" />\n  </div>\n  <!-- Image 2 - if available -->\n  <div class=\"dws-image-frame\" ng-show=\"dataObject.images.noOfImages > 1\" ng-click=\"showLargeImage(1)\">\n    <img ng-src=\"{{ dataObject.images.images[1] }}\" class=\"dws-image\" />\n  </div>\n  <!-- Image 3 - if available -->\n  <div class=\"dws-image-frame\" ng-show=\"dataObject.images.noOfImages > 2\" ng-click=\"showLargeImage(2)\">\n    <img ng-src=\"{{ dataObject.images.images[2] }}\" class=\"dws-image\" />\n  </div>\n  <!-- Image 4 - if available -->\n  <div class=\"dws-image-frame\" ng-show=\"dataObject.images.noOfImages > 3\" ng-click=\"showLargeImage(3)\">\n    <img ng-src=\"{{ dataObject.images.images[3] }}\" class=\"dws-image\" />\n  </div>\n</div>\n\n<div ng-class=\"{'modal':!showImageDialog, 'modal show-modal modal-layer-image':showImageDialog}\" ng-click=\"closeImageDialog()\">\n  <div class=\"modal-content-image\" ng-click=\"$event.stopPropagation()\">\n    <span class=\"close-button\" ng-click=\"closeImageDialog()\">&times;</span>\n\t<div class=\"image-dialog-frame\">\n\t  <img ng-src=\"{{ largeImage }}\" class=\"image-dialog-image\" />\n\t</div>\n  </div>\n</div>\n\n<script>\n(function(scope) {\nconst filterScanSource = localStorage.getItem('filterScanSource') || ''\n/**\n * Statis texts for data headers for the DWS dashboard.\n */\nscope.dataHeaders = {\n  images: {\n    noOfImages: 0,\n  },\n};\n\n/**\n * Data object used for mapping and transferring package\n * data to the DWS dashboard.\n */\nscope.dataObject = {\n  hasData: false,\n  corrId: -1,\n  scanDate: '',\n  scanTime: '',\n  images: {\n    noOfImages: 0,\n    images: [],\n    good: []\n  },\n};\n\n/**\n* Image dialog\n*/\nscope.showImageDialog = false;\nscope.largeImage = null;\nscope.showLargeImage = (index) => {\n  if(scope.dataObject.images.noOfImages >= index + 1) {  // Add condition: && scope.dataObject.images.good[index]\n    scope.largeImage = scope.dataObject.images.images[index];\n\tscope.openImageDialog();\n  }\n};\nscope.openImageDialog = () => {\n  scope.showImageDialog = true;\n}\nscope.closeImageDialog = () => {\n  scope.showImageDialog = false;\n}\n\nscope.$watch(\"msg\", (msg) => {\n  if(msg) {\n    // Update displayed status when a data update is received\n    if(msg.topic === 'uiDataheaders') {\n      scope.dataHeaders = msg.payload;\n    } else if(msg.topic === 'uiData') {\n      if (filterScanSource && msg.payload.scanSource != filterScanSource) {\n        return\n      }\n      scope.dataObject = msg.payload;\n    } else if(msg.topic === 'uiDataUpdate' && scope.dataObject.corrId == msg.payload.corrId) {\n      if (filterScanSource && msg.payload.scanSource != filterScanSource) {\n        return\n      }\n      scope.dataObject = msg.payload;\n    }\n  }\n});\n})(scope);\n</script>\n",
      "storeOutMessages": false,
      "fwdInMessages": false,
      "templateScope": "local",
      "x": 1700,
      "y": 140,
      "wires": [
          []
      ]
  },
  {
      "id": "2e648283d8aaec5f",
      "type": "ui_template",
      "z": "be047adf.efd448",
      "g": "8107ad0873d7290c",
      "group": "ddfe3c82.99dd28",
      "name": "Status view",
      "order": 1,
      "width": 10,
      "height": 9,
      "format": "<script type=\"text/javascript\" src=\"/scripts/gauge.min.js\"></script>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/scaletronic-dws.css\"/>\n<div class=\"dws-rounded-status-box\">\n\n  <div class=\"dws-status-log-latest-container\">\n\t  <!-- When the template has not been initialized -->\n    <div ng-show=\"!initialized\" class=\"dws-status-log-row dws-status-log-row-latest\">\n      <div class=\"dws-status-log-time\">&nbsp;</div>\n      <div class=\"package-status-log-id\">&nbsp;</div>\n      <div class=\"package-status-log-flag dws-check-mark-pending\"></div>\n      <div class=\"package-status-log-flag dws-check-mark-pending\"></div>\n      <div class=\"package-status-log-flag dws-check-mark-pending\"></div>\n      <div class=\"package-status-log-flag dws-check-mark-pending\"></div>\n\t  <div class=\"package-status-log-sortlane dws-good-data\">&nbsp;</div>\n\t  <div class=\"package-status-log-text dws-good-data\">&nbsp;</div>\n    </div>\n\t  <!-- And when the template has been initialized -->\n    <div ng-show=\"initialized\" class=\"dws-status-log-row dws-status-log-row-latest\" ng-click=\"showLogDetails(-1)\">\n      <div class=\"dws-status-log-time\">{{ dataObject.scanTime }}</div>\n      <div class=\"package-status-log-id\" ng-show=\"dataObject.packageIds.ids.length\" >{{ dataObject.packageIds.ids[0] }}</div>\n      <div ng-show=\"!dataObject.hasData || !dataObject.isDataError\" ng-class=\"{'package-status-log-flag dws-check-mark-good':dataObject.hasData, 'package-status-log-flag dws-check-mark-pending':!dataObject.hasData}\"><i class=\"fa fa-check\"></i></div>\n\t  <div ng-show=\"dataObject.hasData && dataObject.isDataError\" class=\"package-status-log-flag dws-check-mark-bad\"><i class=\"fa fa-close\"></i></div>\n    <div ng-class=\"{'package-status-log-flag dws-check-mark-bad':(dataObject.hasData && dataObject.completion.sorting.error), 'package-status-log-flag dws-check-mark-good':(dataObject.hasData && dataObject.completion.sorting.isSorted && !dataObject.completion.sorting.error), 'package-status-log-flag dws-check-mark-pending':(!dataObject.hasData || (!dataObject.completion.sorting.isSorted && !dataObject.completion.sorting.error))}\"><i class=\"fa fa-random\"></i></div>\n    <!--\n    <div ng-class=\"{'package-status-log-flag dws-check-mark-bad':(dataObject.hasData && dataObject.completion.datatransfer.error), 'package-status-log-flag dws-check-mark-good':(dataObject.hasData && dataObject.completion.datatransfer.isTransferred && !dataObject.completion.datatransfer.error), 'package-status-log-flag dws-check-mark-pending':(!dataObject.hasData || (!dataObject.completion.datatransfer.isTransferred && !dataObject.completion.datatransfer.error))}\"><i class=\"fa fa-paper-plane\"></i></div>\n    -->\n    <!--\n    <div ng-class=\"{'package-status-log-flag dws-check-mark-bad':(dataObject.hasData && dataObject.completion.imagetransfer.error), 'package-status-log-flag dws-check-mark-good':(dataObject.hasData && dataObject.completion.imagetransfer.isTransferred && !dataObject.completion.imagetransfer.error), 'package-status-log-flag dws-check-mark-pending':(!dataObject.hasData || (!dataObject.completion.imagetransfer.isTransferred && !dataObject.completion.imagetransfer.error))}\"><i class=\"fa fa-camera\"></i></div>\n    -->\n\t  <div ng-class=\"{'package-status-log-sortlane dws-good-data':(!dataObject.hasData || !dataObject.completion.sorting.error && dataObject.sorting.good), 'package-status-log-sortlane dws-bad-data':(dataObject.hasData && (dataObject.completion.sorting.error || !dataObject.sorting.good))}\">{{ dataObject.sorting.sortPath }}</div>\n    <div ng-class=\"{'package-status-log-text dws-good-data':(!dataObject.hasData || !dataObject.isDataError), 'package-status-log-text dws-bad-data':(dataObject.hasData && dataObject.isDataError)}\">{{ dataObject.statusTxt.short }}</div>\n    </div>\n  </div>\n  <!-- Log list -->\n  <div class=\"dws-status-log-list-container\">\n    <div class=\"dws-scrollable-log\">\n      <div class=\"dws-status-log-row\" ng-repeat=\"logObj in logList track by logObj.corrId\" ng-click=\"showLogDetails($index)\">\n\t\t  <div class=\"dws-status-log-time\">{{ logObj.scanTime }}</div>\n\t\t  <div class=\"package-status-log-id\" ng-show=\"logObj.packageIds.ids.length\" >{{ logObj.packageIds.ids[0] }}</div>\n\t\t  <div ng-show=\"!logObj.isDataError\" class=\"package-status-log-flag dws-check-mark-good\"><i class=\"fa fa-check\"></i></div>\n\t\t  <div ng-show=\"logObj.isDataError\" class=\"package-status-log-flag dws-check-mark-bad\"><i class=\"fa fa-close\"></i></div>\n\t\t  <div ng-class=\"{'package-status-log-flag dws-check-mark-bad':logObj.completion.sorting.error, 'package-status-log-flag dws-check-mark-good':logObj.completion.sorting.isSorted, 'package-status-log-flag dws-check-mark-pending':(!logObj.completion.sorting.isSorted && !logObj.completion.sorting.error)}\"><i class=\"fa fa-random\"></i></div>\n      <!--\n\t\t  <div ng-class=\"{'package-status-log-flag dws-check-mark-bad':logObj.completion.datatransfer.error, 'package-status-log-flag dws-check-mark-good':logObj.completion.datatransfer.isTransferred, 'package-status-log-flag dws-check-mark-pending':(!logObj.completion.datatransfer.isTransferred && !logObj.completion.datatransfer.error)}\"><i class=\"fa fa-paper-plane\"></i></div>\n      -->\n      <!--\n\t\t  <div ng-class=\"{'package-status-log-flag dws-check-mark-bad':logObj.completion.imagetransfer.error, 'package-status-log-flag dws-check-mark-good':logObj.completion.imagetransfer.isTransferred, 'package-status-log-flag dws-check-mark-pending':(!logObj.completion.imagetransfer.isTransferred && !logObj.completion.imagetransfer.error)}\"><i class=\"fa fa-camera\"></i></div>\n      -->\n      <div ng-class=\"{'package-status-log-sortlane':(!logObj.completion.sorting.error && logObj.sorting.good), 'package-status-log-sortlane dws-bad-data':(logObj.completion.sorting.error || !logObj.sorting.good)}\">{{ logObj.sorting.sortPath }}</div>\n\t\t  <div ng-class=\"{'package-status-log-text':!logObj.isDataError, 'package-status-log-text dws-bad-data':logObj.isDataError}\">{{ logObj.statusTxt.short }}</div>\n      </div>\n    </div>\n  </div>\n\n  <!-- Statisics -->\n  <div class=\"dws-statistics-group\">\n    <div class=\"dws-gauge-box\">\n\t  <div class=\"dws-statistics-header\">{{ dataHeaders.statistics.throughput }}</div>\n      <div class=\"gauge-wrapper\">\n        <div id=\"dws-stats-throughput\" class=\"gauge-container\"></div>\n      </div>\n\t</div>\n    <div class=\"dws-gauge-box\" style=\"display:none;\">\n\t  <div class=\"dws-statistics-header\">{{ dataHeaders.statistics.errorRate }}</div>\n      <div class=\"gauge-wrapper\">\n        <div id=\"dws-stats-error-rate\" class=\"gauge-container\"></div>\n\t  </div>\n    </div>\n    <div class=\"dws-statistics-box\">\n\t  <div class=\"dws-statistics-header\">{{ dataHeaders.statistics.lastReset }}</div>\n\t  <div class=\"dws-statistics-data\">{{ statistics.lastResetTime }}</div>\n\t  <div class=\"dws-statistics-header dws-statistics-data-spacer\">{{ dataHeaders.statistics.firstPackage }}</div>\n\t  <div class=\"dws-statistics-data\">{{ statistics.firstPackageTime }}</div>\n    </div>\n    <div class=\"dws-statistics-box\">\n\t  <div class=\"dws-statistics-header\">{{ dataHeaders.statistics.totalPackages }}</div>\n\t  <div class=\"dws-statistics-data\">{{ statistics.noOfPackages }}</div>\n\t  <div class=\"dws-statistics-header dws-statistics-data-spacer\">{{ dataHeaders.statistics.errorPackages }}</div>\n\t  <div class=\"dws-statistics-data\">{{ statistics.noOfBadPackages }}</div>\n    </div>\n    <div class=\"dws-statistics-box\">\n\t  <div class=\"dws-statistics-header\">{{ dataHeaders.statistics.avgPerHour }}</div>\n\t  <div class=\"dws-statistics-data\">{{ statistics.avgPackagesPerHour }}</div>\n\t  <div style=\"display:none;\" class=\"dws-statistics-header dws-statistics-data-spacer\">{{ dataHeaders.statistics.avgErrorRate }}</div>\n\t  <div style=\"display:none;\" class=\"dws-statistics-data\">{{ statistics.errorRate }}</div>\n    </div>\n  </div>\n</div>\n\n<!-- Log details dialog -->\n<div ng-class=\"{'modal':!showLogDetailsDialog, 'modal show-modal modal-layer-log-detail':showLogDetailsDialog}\" ng-click=\"closeLogDetailsDialog()\">\n  <div class=\"modal-content-log-detail\" ng-click=\"$event.stopPropagation()\">\n    <span class=\"close-button\" ng-click=\"closeLogDetailsDialog()\">&times;</span>\n    <span class=\"updown-button\" ng-click=\"nextLogDetails()\">&or;</span>\n    <span class=\"updown-button\" ng-click=\"prevLogDetails()\">&and;</span>\n    <span class=\"package-status-log-pkg-internal\">({{ detailLogObj.scanSource }} / {{ detailLogObj.corrId }})</span>\n\t<!-- Top bar - date, time and flags -->\n\t<div class=\"dws-log-details-header-row\">\n\t  <div class=\"dws-status-log-time\">{{ detailLogObj.scanDate }} {{ detailLogObj.scanTime }}</div>\n    <div ng-show=\"!detailLogObj.isDataError\" class=\"package-status-log-flag dws-check-mark-good\"><i class=\"fa fa-check\"></i></div>\n\t  <div ng-show=\"detailLogObj.isDataError\" class=\"package-status-log-flag dws-check-mark-bad\"><i class=\"fa fa-close\"></i></div>\n\t  <div ng-class=\"{'package-status-log-flag dws-check-mark-bad':detailLogObj.completion.sorting.error, 'package-status-log-flag dws-check-mark-good':(detailLogObj.completion.sorting.isSorted && !detailLogObj.completion.sorting.error), 'package-status-log-flag dws-check-mark-pending':(!detailLogObj.completion.sorting.isSorted && !detailLogObj.completion.sorting.error)}\"><i class=\"fa fa-random\"></i></div>\n    <!--\n    <div ng-class=\"{'package-status-log-flag dws-check-mark-bad':detailLogObj.completion.datatransfer.error, 'package-status-log-flag dws-check-mark-good':(detailLogObj.completion.datatransfer.isTransferred && !detailLogObj.completion.datatransfer.error), 'package-status-log-flag dws-check-mark-pending':(!detailLogObj.completion.datatransfer.isTransferred && !detailLogObj.completion.datatransfer.error)}\"><i class=\"fa fa-paper-plane\"></i></div>\n    -->\n    <!--\n    <div ng-class=\"{'package-status-log-flag dws-check-mark-bad':detailLogObj.completion.imagetransfer.error, 'package-status-log-flag dws-check-mark-good':(detailLogObj.completion.imagetransfer.isTransferred && !detailLogObj.completion.imagetransfer.error), 'package-status-log-flag dws-check-mark-pending':(!detailLogObj.completion.imagetransfer.isTransferred && !detailLogObj.completion.imagetransfer.error)}\"><i class=\"fa fa-camera\"></i></div>\n    -->\n\t</div>\n\n\t<!-- Package codes and sort lane -->\n\t<div class=\"dws-log-details-row dws-log-details-row-border\">\n\t  <div ng-if=\"dataHeaders.packageCodes.noOfCodes > 0\">\n\t\t<div class=\"dws-data-header\">{{ dataHeaders.packageCodes.headers[0] }}</div>\n\t\t<div class=\"dws-data-frame\">\n\t\t  <div ng-show=\"detailLogObj.packageIds.good[0] && detailLogObj.packageIds.ids[0]\" class=\"dws-check-mark-log dws-check-mark-good\"><i class=\"fa fa-check\"></i></div>\n\t\t  <div ng-show=\"!detailLogObj.packageIds.good[0] && detailLogObj.packageIds.ids[0]\" class=\"dws-check-mark-log  dws-check-mark-bad\"><i class=\"fa fa-close\"></i></div>\n\t\t  <div ng-class=\"{'package-code-data-log dws-good-data':detailLogObj.packageIds.good[0], 'package-code-data-log dws-bad-data':!detailLogObj.packageIds.good[0]}\">{{ detailLogObj.packageIds.ids[0] }}</div>\n\t\t</div>\n\t  </div>\n\t  <div ng-if=\"dataHeaders.packageCodes.noOfCodes > 1\">\n\t\t<div class=\"dws-data-header\">{{ dataHeaders.packageCodes.headers[1] }}</div>\n\t\t<div class=\"dws-data-frame\">\n\t\t  <div ng-show=\"detailLogObj.packageIds.good[1] && detailLogObj.packageIds.ids[1]\" class=\"dws-check-mark-log dws-check-mark-good\"><i class=\"fa fa-check\"></i></div>\n\t\t  <div ng-show=\"!detailLogObj.packageIds.good[1] && detailLogObj.packageIds.ids[1]\" class=\"dws-check-mark-log  dws-check-mark-bad\"><i class=\"fa fa-close\"></i></div>\n\t\t  <div ng-class=\"{'package-code-data-log dws-good-data':detailLogObj.packageIds.good[1], 'package-code-data-log dws-bad-data':!detailLogObj.packageIds.good[1]}\">{{ detailLogObj.packageIds.ids[1] }}</div>\n\t\t</div>\n\t  </div>\n\t  <div ng-if=\"dataHeaders.packageCodes.noOfCodes > 2\">\n\t\t<div class=\"dws-data-header\">{{ dataHeaders.packageCodes.headers[2] }}</div>\n\t\t<div class=\"dws-data-frame\">\n\t\t  <div ng-show=\"detailLogObj.packageIds.good[2] && detailLogObj.packageIds.ids[2]\" class=\"dws-check-mark-log dws-check-mark-good\"><i class=\"fa fa-check\"></i></div>\n\t\t  <div ng-show=\"!detailLogObj.packageIds.good[2] && detailLogObj.packageIds.ids[2]\" class=\"dws-check-mark-log  dws-check-mark-bad\"><i class=\"fa fa-close\"></i></div>\n\t\t  <div ng-class=\"{'package-code-data-log dws-good-data':detailLogObj.packageIds.good[2], 'package-code-data-log dws-bad-data':!detailLogObj.packageIds.good[2]}\">{{ detailLogObj.packageIds.ids[2] }}</div>\n\t\t</div>\n\t  </div>\n\t  <div>\n\t  <div class=\"dws-data-header\">{{ dataHeaders.sorting.header }}</div>\n\t    <div class=\"dws-data-frame\">\n\t\t  <div ng-show=\"detailLogObj.sorting.good && detailLogObj.sorting.sortPath\" class=\"dws-check-mark-log dws-check-mark-good\"><i class=\"fa fa-check\"></i></div>\n\t\t  <div ng-show=\"!detailLogObj.sorting.good && detailLogObj.sorting.sortPath\" class=\"dws-check-mark-log  dws-check-mark-bad\"><i class=\"fa fa-close\"></i></div>\n\t\t  <div ng-class=\"{'sort-path-data-log dws-good-data':detailLogObj.sorting.good, 'sort-path-data-log dws-bad-data':!detailLogObj.sorting.good}\">{{detailLogObj.sorting.sortPath }}</div>\n\t\t</div>\n\t  </div>\n\t</div>\n\n\t<!-- Sorting and transfer status texts and timestamps - if present -->\n\t<div ng-show=\"(detailLogObj.statusTxt.full || detailLogObj.completion.sorting.statusTxt || detailLogObj.completion.datatransfer.statusTxt)\" class=\"dws-log-details-row-border\">\n\t  <!-- Data error - if present -->\n\t  <div class=\"dws-log-details-row\" ng-show=\"detailLogObj.statusTxt.full\">\n\t    <div>\n\t      <div class=\"dws-data-header\">{{ dataHeaders.status.error }}</div>\n\t      <div class=\"dws-data-frame\">\n\t\t      <div class=\"dws-check-mark-log dws-check-mark-bad\"><i class=\"fa fa-close\"></i></div>\n\t        <div class=\"dws-status-log-err-text-dialog\">{{ detailLogObj.statusTxt.full }}</div>\n\t      </div>\n\t    </div>\n\t  </div>\n\t  <!-- Sorting status - if present -->\n\t  <div class=\"dws-log-details-row\" ng-show=\"detailLogObj.completion.sorting.statusTxt\">\n\t    <div>\n\t      <div class=\"dws-data-header\">{{ dataHeaders.status.sorting }}</div>\n\t      <div class=\"dws-data-frame\">\n\t\t    <div ng-class=\"{'dws-check-mark-log dws-check-mark-bad':detailLogObj.completion.sorting.error, 'dws-check-mark-log dws-check-mark-good':(detailLogObj.completion.sorting.isSorted && !detailLogObj.completion.sorting.error), 'dws-check-mark-log dws-check-mark-pending':(!detailLogObj.completion.sorting.isSorted && !detailLogObj.completion.sorting.error)}\"><i class=\"fa fa-random\"></i></div>\n\t        <div ng-show=\"!detailLogObj.completion.sorting.error\" class=\"dws-status-log-text-dialog\">{{ detailLogObj.completion.sorting.statusTxt }}, {{ detailLogObj.completion.sorting.timestamp }}</div>\n\t        <div ng-show=\"detailLogObj.completion.sorting.error\" class=\"dws-status-log-text-dialog dws-bad-data\">{{ detailLogObj.completion.sorting.statusTxt }}</div>\n\t      </div>\n  \t    </div>\n\t  </div>\n\t  <!-- Data transfer status - if present -->\n\t  <div class=\"dws-log-details-row\" ng-show=\"detailLogObj.completion.datatransfer.statusTxt\">\n\t    <div>\n\t      <div class=\"dws-data-header\">{{ dataHeaders.status.datatransfer }}</div>\n\t      <div class=\"dws-data-frame\">\n\t\t    <div ng-class=\"{'dws-check-mark-log dws-check-mark-bad':detailLogObj.completion.datatransfer.error, 'dws-check-mark-log dws-check-mark-good':(detailLogObj.completion.datatransfer.isTransferred && !detailLogObj.completion.datatransfer.error), 'dws-check-mark-log dws-check-mark-pending':(!detailLogObj.completion.datatransfer.isTransferred && !detailLogObj.completion.datatransfer.error)}\"><i class=\"fa fa-paper-plane\"></i></div>\n\t        <div ng-show=\"!detailLogObj.completion.datatransfer.error\" class=\"dws-status-log-text-dialog\">{{ detailLogObj.completion.datatransfer.statusTxt }}, {{ detailLogObj.completion.datatransfer.timestamp }}</div>\n\t        <div ng-show=\"detailLogObj.completion.datatransfer.error\" class=\"dws-status-log-text-dialog dws-bad-data\">{{ detailLogObj.completion.datatransfer.statusTxt }}</div>\n\t      </div>\n\t    </div>\n    </div>\n\t  <!-- Image transfer status - if present -->\n\t  <div class=\"dws-log-details-row\" ng-show=\"detailLogObj.completion.imagetransfer.statusTxt\">\n\t    <div>\n\t      <div class=\"dws-data-header\">{{ dataHeaders.status.imagetransfer }}</div>\n\t      <div class=\"dws-data-frame\">\n\t\t    <div ng-class=\"{'dws-check-mark-log dws-check-mark-bad':detailLogObj.completion.imagetransfer.error, 'dws-check-mark-log dws-check-mark-good':(detailLogObj.completion.imagetransfer.isTransferred && !detailLogObj.completion.imagetransfer.error), 'dws-check-mark-log dws-check-mark-pending':(!detailLogObj.completion.imagetransfer.isTransferred && !detailLogObj.completion.imagetransfer.error)}\"><i class=\"fa fa-camera\"></i></div>\n\t        <div ng-show=\"!detailLogObj.completion.imagetransfer.error\" class=\"dws-status-log-text-dialog\">{{ detailLogObj.completion.imagetransfer.statusTxt }}, {{ detailLogObj.completion.imagetransfer.timestamp }}</div>\n\t        <div ng-show=\"detailLogObj.completion.imagetransfer.error\" class=\"dws-status-log-text-dialog dws-bad-data\">{{ detailLogObj.completion.imagetransfer.statusTxt }}</div>\n\t      </div>\n\t    </div>\n\t  </div>\n\t</div>\n\n\t<!-- Package data -->\n\t<div class=\"dws-log-details-row dws-log-details-row-border\">\n      <div>\n\t    <div class=\"dws-data-header\">{{ dataHeaders.dimensions.lengthHeader }}</div>\n\t\t<div class=\"dws-data-frame\">\n\t\t  <div ng-show=\"detailLogObj.dimensions.lengthIsGood && detailLogObj.dimensions.length\" class=\"dws-check-mark-log dws-check-mark-good\"><i class=\"fa fa-check\"></i></div>\n\t\t  <div ng-show=\"!detailLogObj.dimensions.lengthIsGood && detailLogObj.dimensions.length\" class=\"dws-check-mark-log  dws-check-mark-bad\"><i class=\"fa fa-close\"></i></div>\n\t\t  <div ng-class=\"{'dws-data-log dws-good-data':detailLogObj.dimensions.lengthIsGood, 'dws-data-log dws-bad-data':!detailLogObj.dimensions.lengthIsGood}\">{{ detailLogObj.dimensions.length }}</div>\n\t\t  <div class=\"dws-unit-log\">{{ dataHeaders.units.dimension }}</div>\n\t\t</div>\n\t\t<div class=\"dws-data-header\">{{ dataHeaders.dimensions.widthHeader }}</div>\n\t\t<div class=\"dws-data-frame\">\n\t\t  <div ng-show=\"detailLogObj.dimensions.widthIsGood && detailLogObj.dimensions.width\" class=\"dws-check-mark-log dws-check-mark-good\"><i class=\"fa fa-check\"></i></div>\n\t\t  <div ng-show=\"!detailLogObj.dimensions.widthIsGood && detailLogObj.dimensions.width\" class=\"dws-check-mark-log  dws-check-mark-bad\"><i class=\"fa fa-close\"></i></div>\n\t\t  <div ng-class=\"{'dws-data-log dws-good-data':detailLogObj.dimensions.widthIsGood, 'dws-data-log dws-bad-data':!detailLogObj.dimensions.widthIsGood}\">{{ detailLogObj.dimensions.width }}</div>\n\t\t  <div class=\"dws-unit-log\">{{ dataHeaders.units.dimension }}</div>\n\t\t</div>\n\t  </div>\n\t  <div>\n\t\t<div class=\"dws-data-header\">{{ dataHeaders.dimensions.heightHeader }}</div>\n\t\t<div class=\"dws-data-frame\">\n\t\t  <div ng-show=\"detailLogObj.dimensions.heightIsGood && detailLogObj.dimensions.height\" class=\"dws-check-mark-log dws-check-mark-good\"><i class=\"fa fa-check\"></i></div>\n\t\t  <div ng-show=\"!detailLogObj.dimensions.heightIsGood && detailLogObj.dimensions.height\" class=\"dws-check-mark-log  dws-check-mark-bad\"><i class=\"fa fa-close\"></i></div>\n\t\t  <div ng-class=\"{'dws-data-log dws-good-data':detailLogObj.dimensions.heightIsGood, 'dws-data-log dws-bad-data':!detailLogObj.dimensions.heightIsGood}\">{{ detailLogObj.dimensions.height }}</div>\n\t\t  <div class=\"dws-unit-log\">{{ dataHeaders.units.dimension }}</div>\n\t\t</div>\n\t\t<div class=\"dws-data-header\">{{ dataHeaders.dimensions.volumeHeader }}</div>\n\t\t<div class=\"dws-data-frame\">\n\t\t  <div ng-show=\"detailLogObj.dimensions.volumeIsGood && detailLogObj.dimensions.volume\" class=\"dws-check-mark-log dws-check-mark-good\"><i class=\"fa fa-check\"></i></div>\n\t\t  <div ng-show=\"!detailLogObj.dimensions.volumeIsGood && detailLogObj.dimensions.volume\" class=\"dws-check-mark-log  dws-check-mark-bad\"><i class=\"fa fa-close\"></i></div>\n\t\t  <div ng-class=\"{'dws-data-log dws-good-data':detailLogObj.dimensions.volumeIsGood, 'dws-data-log dws-bad-data':!detailLogObj.dimensions.volumeIsGood}\">{{ detailLogObj.dimensions.volume }}</div>\n\t\t  <div class=\"dws-unit-log\">{{ dataHeaders.units.volume }}</div>\n\t\t</div>\n\t  </div>\n\t  <div>\n\t\t<div class=\"dws-data-header\">{{ dataHeaders.weight.weightHeader }}</div>\n\t\t<div class=\"dws-data-frame\">\n\t\t  <div ng-show=\"detailLogObj.weight.weightIsGood && detailLogObj.weight.weight\" class=\"dws-check-mark-log dws-check-mark-good\"><i class=\"fa fa-check\"></i></div>\n\t\t  <div ng-show=\"!detailLogObj.weight.weightIsGood && detailLogObj.weight.weight\" class=\"dws-check-mark-log  dws-check-mark-bad\"><i class=\"fa fa-close\"></i></div>\n\t\t  <div ng-class=\"{'dws-data-log dws-good-data':detailLogObj.weight.weightIsGood, 'dws-data-log dws-bad-data':!detailLogObj.weight.weightIsGood}\">{{ detailLogObj.weight.weight }}</div>\n\t\t  <div class=\"dws-unit-log\">{{ dataHeaders.units.weight }}</div>\n\t\t</div>\n\t\t<div class=\"dws-data-header\">{{ dataHeaders.weight.volWeightHeader }}</div>\n\t\t<div class=\"dws-data-frame\">\n\t\t  <div ng-show=\"detailLogObj.weight.volumeWeightIsGood && detailLogObj.weight.volumeWeight\" class=\"dws-check-mark-log dws-check-mark-good\"><i class=\"fa fa-check\"></i></div>\n\t\t  <div ng-show=\"!detailLogObj.weight.volumeWeightIsGood && detailLogObj.weight.volumeWeight\" class=\"dws-check-mark-log  dws-check-mark-bad\"><i class=\"fa fa-close\"></i></div>\n\t\t  <div ng-class=\"{'dws-data-log dws-good-data':detailLogObj.weight.volumeWeightIsGood, 'dws-data-log dws-bad-data':!detailLogObj.weight.volumeWeightIsGood}\">{{ detailLogObj.weight.volumeWeight }}</div>\n\t\t  <div class=\"dws-unit-log\">{{ dataHeaders.units.weight }}</div>\n\t\t</div>\n      </div>\n\t</div>\n\n    <!-- Images -->\n    <div class=\"dws-log-image-row dws-log-details-row-border\">\n      <!-- Image 1 - if available -->\n      <div class=\"dws-image-frame\" ng-show=\"detailLogObj.images.noOfImages\" ng-click=\"showLargeImage(0)\">\n        <img ng-src=\"{{ detailLogObj.images.images[0] }}\" class=\"dws-image\" />\n      </div>\n      <!-- Image 2 - if available -->\n      <div class=\"dws-image-frame\" ng-show=\"detailLogObj.images.noOfImages > 1\" ng-click=\"showLargeImage(1)\">\n        <img ng-src=\"{{ detailLogObj.images.images[1] }}\" class=\"dws-image\" />\n      </div>\n      <!-- Image 3 - if available -->\n      <div class=\"dws-image-frame\" ng-show=\"detailLogObj.images.noOfImages > 2\" ng-click=\"showLargeImage(2)\">\n        <img ng-src=\"{{ detailLogObj.images.images[2] }}\" class=\"dws-image\" />\n      </div>\n      <!-- Image 4 - if available -->\n      <div class=\"dws-image-frame\" ng-show=\"detailLogObj.images.noOfImages > 3\" ng-click=\"showLargeImage(3)\">\n        <img ng-src=\"{{ detailLogObj.images.images[3] }}\" class=\"dws-image\" />\n      </div>\n\t</div>\n  </div>\n</div>\n\n<!-- Enlarged image dialog -->\n<div ng-class=\"{'modal':!showImageDialog, 'modal show-modal modal-layer-image':showImageDialog}\" ng-click=\"closeImageDialog()\">\n  <div class=\"modal-content-image\" ng-click=\"$event.stopPropagation()\">\n    <span class=\"close-button\" ng-click=\"closeImageDialog()\">&times;</span>\n\t<div class=\"image-dialog-frame\">\n\t  <img ng-src=\"{{ largeImage }}\" class=\"image-dialog-image\" />\n\t</div>\n  </div>\n</div>\n\n<script>\n(function(scope) {\nconst filterScanSourceGlobal = localStorage.getItem('filterScanSource') || ''\nconst filterScanSourcePackageList = localStorage.getItem('filterScanSourcePackageList') || filterScanSourceGlobal\nconst filterScanSourceStatistics = localStorage.getItem('filterScanSourceStatistics') || filterScanSourceGlobal\n/*\n * Statis texts for data headers for the DWS dashboard.\n */\nscope.dataHeaders = {\n  packageCodes: {\n    noOfCodes: 0,\n    headers: []\n  },\n  sorting : {\n    header: ''\n  },\n  weight: {\n    weightHeader: '',\n    volWeightHeader: '',\n  },\n  dimensions: {\n    lengthHeader: '',\n    widthHeader: '',\n    heightHeader: '',\n    volumeHeader: '',\n  },\n  images: {\n    noOfImages: 0,\n  },\n  units: {\n    dimension: '',\n    volume: '',\n    weight: ''\n  },\n  status: {\n    error: '',\n    sorting: '',\n    datatransfer: '',\n    imagetransfer: ''\n  },\n  statistics: {\n    throughput: '',\n    errorRate: '',\n    lastReset: '',\n    firstPackage: '',\n    totalPackages: '',\n    errorPackages: '',\n    avgPerHour: '',\n    avgErrorRate: ''\n  }\n};\n\n/*\n * Data object used for mapping and transferring package\n * data to the DWS dashboard.\n */\nscope.dataObject = {\n  hasData: false,\n  corrId: -1,\n  scanDate: '',\n  scanTime: '',\n  packageIds: {\n    noOfIds: 0,\n    ids: [],\n    good: []\n  },\n  sorting : {\n    sortPath: '',\n    good: false\n  },\n  weight: {\n    weight: '',\n    volumeWeight: '',\n    weightIsGood: false,\n    volumeWeightIsGood: false\n  },\n  dimensions: {\n    length: '',\n    width: '',\n    height: '',\n    volume: '',\n    lengthIsGood: false,\n    widthIsGood: false,\n    heightIsGood: false,\n    volumeIsGood: false\n  },\n  images: {\n    noOfImages: 0,\n    images: [],\n    good: []\n  },\n  completion: {\n    sorting: {\n      isSorted: false,\n      timestamp: '',\n      error: false,\n      statusTxt: ''\n    },\n    datatransfer: {\n      isTransferred: false,\n      timestamp: '',\n      error: false,\n      statusTxt: ''\n    },\n    imagetransfer: {\n      isTransferred: false,\n      timestamp: '',\n      error: false,\n      statusTxt: ''\n    }\n  },\n  isDataError: false,\n  statusTxt: {\n    short: '',\n    full: ''\n  },\n};\n\n/*\n* Package statistics\n*/\nscope.statistics = {\n  lastResetTime: '',\n  firstPackageTime: '',\n  lastPackageTime: '',\n  noOfPackages: 0,\n  noOfGoodPackages: 0,\n  noOfBadPackages: 0,\n  avgPackagesPerHour: 0,\n  avgGoodPackagesPerHour: 0,\n  avgBadPackagesPerHour: 0,\n  errorRate: 0,\n  currentThroughput: 0,\n  currentErrorRate: 0\n};\n\n/*\n * DWS dashboard configuration data\n */\nscope.dashboardConfig = {\n  packageLog: {\n    noOfRecords: 500\n  }\n};\n\n/*\n * DWS log list\n */\nscope.logList = [];\nscope.setMaxLogListLength = () => {\n  if(scope.logList.length > scope.dashboardConfig.packageLog.noOfRecords)\n    // Shorten the list\n\tscope.logList.length = scope.dashboardConfig.packageLog.noOfRecords;\n};\nscope.addLog = (packageObj) => {\n  // This is not super efficient but we want to have the\n  // newest log on top and push the oldest out if we're out of space. Would\n  // be much better with a linked list but to my knowledge no support\n  // by Angularjs.\n  // First of all - check if the object has data. That will not be the\n  // case at start up\n  if(!packageObj.hasData) {\n    // It doesn't\n    return;\n  }\n  let startIndex = scope.logList.length;\n  if(startIndex >= scope.dashboardConfig.packageLog.noOfRecords)\n    startIndex = scope.dashboardConfig.packageLog.noOfRecords-1;\n  else\n    // Allocate space for one more reccord reference\n\tscope.logList.push(null);\n  for(i = startIndex; i>0; i--)\n    scope.logList[i] = scope.logList[i-1];\n  // Add the new record. NB: We have to make a deep copy of the object - otherwise\n  // we'll just reference the same object all the way through\n  scope.logList[0] = angular.copy(packageObj);\n};\n// Finds a log object from the correlation id. Returns the index to scope.logList\n// of the object if found, -1 if not.\nscope.getLog = (corrId) => {\n  let logLength = scope.logList.length;\n  let foundIndex = -1;\n  for(let i=0; i<logLength && foundIndex<0; i++) {\n\tif(scope.logList[i].corrId == corrId)\n\t  // Got the object\n\t  foundIndex = i;\n  }\n  return foundIndex;\n};\n\n/*\n* Gauges\n*/\nscope.errorRateGauge = Gauge(\n  document.getElementById('dws-stats-error-rate'), {\n    min: 0,\n    max: 100,\n    dialStartAngle: 180,\n    dialEndAngle: 0,\n    value: 0,\n    color: function(value) {\n        if(value < 10) {\n          return '#37b332';\n        }else if(value < 25) {\n          return '#8bdd88';\n        }else if(value < 50) {\n          return '#ffff00';\n        }else {\n          return '#f62323';\n        }\n    }\n  }\n);\nscope.throughputGauge = Gauge(\n  document.getElementById('dws-stats-throughput'), {\n    min: 0,\n    max: 6000,\n    dialStartAngle: 180,\n    dialEndAngle: 0,\n    value: 50,\n     color: function(value) {\n        if(value < 500) {\n          return '#d8f4d7';\n        }else if(value < 1200) {\n          return '#8bdd88';\n        }else {\n          return '#37b332';\n        }\n     }\n  }\n);\n\n/*\n* Log details modeless dialog\n*/\nscope.showLogDetailsDialog = false;\nscope.detailLogObj = null;\nscope.showLogDetails = (index) => {\n  if(index < 0)\n    scope.detailLogObj = scope.dataObject;\n  else\n    scope.detailLogObj = scope.logList[index];\n  if(scope.detailLogObj.hasData)\n    // This check shouldn't be necessary but just in case something went wrong\n\tscope.openLogDetailsDialog();\n};\nscope.openLogDetailsDialog = () => {\n  scope.showLogDetailsDialog = true;\n};\nscope.closeLogDetailsDialog = () => {\n  scope.showLogDetailsDialog = false;\n};\nscope.prevLogDetails = () => {\n  if(!scope.detailLogObj)\n    return;\n  /* Find the currently displayed log detail in the lists */\n  let found = false;\n  let index = scope.getLog(scope.detailLogObj.corrId);\n  if(index<0) {\n    if(scope.detailLogObj.corrId === scope.dataObject.corrId)\n\t  found = true;\n  } else\n    found = true;\n  if(!found) {\n    // We'll assume that the last item in the list was selected\n\t// and was later removed from the list. Show the current\n\t// last item - if there is any\n\tif(scope.logList.length)\n\t  scope.detailLogObj = scope.logList[scope.logList.length-1];\n  }\n  else {\n    if(index<0) {\n\t  // The selected item is the latest. We can't go up. select\n\t  // the very last item in the history - if there is a history\n\t  if(scope.logList.length)\n\t    scope.detailLogObj = scope.logList[scope.logList.length-1];\n\t}\n\telse {\n\t  if(index === 0)\n\t    scope.detailLogObj = scope.dataObject;\n\t  else\n\t    scope.detailLogObj = scope.logList[index-1];\n\t}\n  }\n}\nscope.nextLogDetails = () => {\n  if(!scope.detailLogObj)\n    return;\n  /* Find the currently displayed log detail in the lists */\n  let found = false;\n  let index = scope.getLog(scope.detailLogObj.corrId);\n  if(index<0) {\n    if(scope.detailLogObj.corrId === scope.dataObject.corrId)\n\t  found = true;\n  } else\n    found = true;\n  if(!found)\n    // We'll assume that the last item in the list was selected\n\t// and was later removed from the list. Show the most recent item\n\tscope.detailLogObj = scope.dataObject;\n  else {\n    if(index<0) {\n\t  // The selected item is the latest. Show first item from the\n\t  // history - if there is a history\n      if(scope.logList.length)\n\t    scope.detailLogObj = scope.logList[0];\n\t}\n\telse {\n\t  if(index === scope.logList.length-1)\n\t    // Last item in the history. Show latest\n\t    scope.detailLogObj = scope.dataObject;\n\t  else\n\t    scope.detailLogObj = scope.logList[index+1];\n\t}\n  }\n}\n\n/**\n* Image dialog\n*/\nscope.showImageDialog = false;\nscope.largeImage = null;\nscope.showLargeImage = (index) => {\n  if(scope.detailLogObj.images.noOfImages >= index + 1) {  // Add condition: && scope.detailLogObj.images.good[index]\n    scope.largeImage = scope.detailLogObj.images.images[index];\n\tscope.openImageDialog();\n  }\n};\nscope.openImageDialog = () => {\n  scope.showImageDialog = true;\n}\nscope.closeImageDialog = () => {\n  scope.showImageDialog = false;\n}\n\n\n/*\n* The initialized flag tells if the template has been initialized. The template\n* is considered inintialized when the first data package has been received.\n*/\nscope.initialized = false;\n\n/*\n* Data update/message handler\n*/\nscope.$watch('msg', (msg) => {\n  if(msg) {\n    // Update displayed status when a data update is received\n\tswitch(msg.topic) {\n    case 'uiData':\n\t    scope.initialized = true;\n      if (filterScanSourcePackageList && msg.payload.scanSource != filterScanSourcePackageList) {\n        return\n      }\n\t    scope.addLog(scope.dataObject);\n      scope.dataObject = msg.payload;\n\t  break;\n\n    case 'uiDataUpdate':\n      if (filterScanSourcePackageList && msg.payload.scanSource != filterScanSourcePackageList) {\n        return\n      }\n      // First check the current record, i.e. scope.dataObject.\n      if(scope.dataObject.corrId == msg.payload.corrId) {\n        scope.dataObject = msg.payload;\n      }\n      else {\n        // Not found - then check the historic ones\n        let logIndex = scope.getLog(msg.payload.corrId);\n        if(logIndex >= 0) {\n          scope.logList[logIndex] = msg.payload;\n        }\n      }\n      break;\n\n\t  case 'uiStatistics':\n      scope.statistics = filterScanSourceStatistics ? msg.payload.bySource[filterScanSourceStatistics] : msg.payload\n\t    scope.errorRateGauge.setValueAnimated(scope.statistics.currentErrorRate, 2);\n      scope.throughputGauge.setValueAnimated(scope.statistics.currentThroughput, 2);\n\t  break;\n\n\t  case 'uiSortingUpdate': {\n\t    // Locate the record to be updated\n      let updateThis = null;\n      // First check the current record, i.e. scope.dataObject.\n      if(scope.dataObject.corrId == msg.payload.corrId)\n        // Got it\n        updateThis = scope.dataObject;\n      else {\n        // Not found - then check the historic ones\n        let logIndex = scope.getLog(msg.payload.corrId);\n        if(logIndex >= 0)\n          // Found!\n          updateThis = scope.logList[logIndex];\n      }\n      if(updateThis) {\n        // Update status\n        updateThis.completion.sorting.isSorted = msg.payload.isSorted;\n        updateThis.completion.sorting.timestamp = msg.payload.timestamp;\n        updateThis.completion.sorting.error = msg.payload.error;\n        updateThis.completion.sorting.statusTxt = msg.payload.statusTxt;\n        if (msg.payload.error) {\n          // Display sorting error in the main package view if there was any.\n          // This is used to show dropped off messages.\n          updateThis.statusTxt.short += (updateThis.statusTxt.short ? '. ' : '') + msg.payload.statusTxt\n        }\n        else {\n          // TODO HACK for Iceland Post ring scanner parcel recovery. Need to think of more structural way to keep messages.\n          updateThis.statusTxt.short = updateThis.statusTxt.short.replace(/Sort error: .*/, '')\n        }\n      }\n\t  }\n\t  break;\n\n\t  case 'uiDataTransferUpdate': {\n\t    // Locate the record to be updated\n      let updateThis = null;\n      // First check the current record, i.e. scope.dataObject.\n      if(scope.dataObject.corrId == msg.payload.corrId)\n        // Got it\n        updateThis = scope.dataObject;\n      else {\n        // Not found - then check the historic ones\n        let logIndex = scope.getLog(msg.payload.corrId);\n        if(logIndex >= 0)\n          // Found!\n          updateThis = scope.logList[logIndex];\n      }\n      if(updateThis) {\n        // Update status\n        updateThis.completion.datatransfer.isTransferred = msg.payload.isTransferred;\n        updateThis.completion.datatransfer.timestamp = msg.payload.timestamp;\n        updateThis.completion.datatransfer.error = msg.payload.error;\n        updateThis.completion.datatransfer.statusTxt = msg.payload.statusTxt;\n      }\n\t  }\n\t  break;\n\n\t  case 'uiImageTransferUpdate': {\n\t    // Locate the record to be updated\n      let updateThis = null;\n      // First check the current record, i.e. scope.dataObject.\n      if(scope.dataObject.corrId == msg.payload.corrId)\n        // Got it\n        updateThis = scope.dataObject;\n      else {\n        // Not found - then check the historic ones\n        let logIndex = scope.getLog(msg.payload.corrId);\n        if(logIndex >= 0)\n          // Found!\n          updateThis = scope.logList[logIndex];\n      }\n      if(updateThis) {\n        // Update status\n        updateThis.completion.imagetransfer.isTransferred = msg.payload.isTransferred;\n        updateThis.completion.imagetransfer.timestamp = msg.payload.timestamp;\n        updateThis.completion.imagetransfer.error = msg.payload.error;\n        updateThis.completion.imagetransfer.statusTxt = msg.payload.statusTxt;\n      }\n\t  }\n\t  break;\n\n\t  case 'uiDataheaders':\n      scope.dataHeaders = msg.payload;\n\t  break;\n\n\t  case 'uiConfig':\n\t    scope.dashboardConfig = msg.payload;\n\t    scope.setMaxLogListLength();\n\t  break;\n\n\t  default:\n\t    // Ignore\n\t}\n  }\n});\n})(scope);\n\n\n</script>\n",
      "storeOutMessages": false,
      "fwdInMessages": false,
      "resendOnRefresh": false,
      "templateScope": "local",
      "x": 1710,
      "y": 180,
      "wires": [
          []
      ]
  },
  {
      "id": "3106ac60b5b931b8",
      "type": "ui_template",
      "z": "be047adf.efd448",
      "g": "8107ad0873d7290c",
      "group": "20ceecca.0affb4",
      "name": "Sort lane",
      "order": 1,
      "width": 3,
      "height": 2,
      "format": "<link rel=\"stylesheet\" type=\"text/css\" href=\"/scaletronic-dws.css\">\n<div class=\"rounded-sort-path-bar\">\n  <div class=\"dws-data-header\">{{ dataHeaders.sorting.header }}</div>\n  <div class=\"dws-data-frame\" ng-if=\"dataObject.sorting.sortPath\">\n    <div ng-show=\"!dataObject.hasData || dataObject.sorting.good\" ng-class=\"{'dws-check-mark dws-check-mark-good':dataObject.hasData, 'dws-check-mark dws-check-mark-pending':!dataObject.hasData}\"><i class=\"fa fa-check\"></i></div>\n    <div ng-show=\"dataObject.hasData && !dataObject.sorting.good\" class=\"dws-check-mark dws-check-mark-bad\"><i class=\"fa fa-close\"></i></div>\n    <div ng-class=\"{'sort-path-data dws-good-data':(dataObject.sorting.good || !dataObject.hasData), 'sort-path-data dws-bad-data':(!dataObject.sorting.good && dataObject.hasData)}\">{{dataObject.sorting.sortPath }}</div>\n  </div>\n  <div class=\"dws-data-frame\" ng-if=\"!dataObject.sorting.sortPath\">\n    <div class=\"dws-check-mark-pending\"></div>\n    <div class=\"sort-path-data dws-good-data\">&nbsp;</div>\n  </div>\n</div>\n\n<script>\n(function(scope) {\nconst filterScanSource = localStorage.getItem('filterScanSource') || ''\n/**\n * Statis texts for data headers for the DWS dashboard.\n */\nscope.dataHeaders = {\n  sorting : {\n    header: ''\n  }\n};\n\n/**\n * Data object used for mapping and transferring package\n * data to the DWS dashboard.\n */\nscope.dataObject = {\n  hasData: false,\n  corrId: -1,\n  scanDate: '',\n  scanTime: '',\n  sorting : {\n    sortPath: '',\n    good: false\n  },\n};\n\nscope.$watch(\"msg\", (msg) => {\n  if(msg) {\n    // Update displayed status when a data update is received\n    if(msg.topic === 'uiDataheaders') {\n      scope.dataHeaders = msg.payload;\n    } else if(msg.topic === 'uiData') {\n      if (filterScanSource && msg.payload.scanSource != filterScanSource) {\n        return\n      }\n      scope.dataObject = msg.payload;\n    } else if(msg.topic === 'uiDataUpdate' && scope.dataObject.corrId == msg.payload.corrId) {\n      if (filterScanSource && msg.payload.scanSource != filterScanSource) {\n        return\n      }\n      scope.dataObject = msg.payload;\n    }\n  }\n});\n})(scope);\n</script>\n",
      "storeOutMessages": false,
      "fwdInMessages": false,
      "templateScope": "local",
      "x": 1700,
      "y": 60,
      "wires": [
          []
      ]
  },
  {
      "id": "ef89b1d0c491f7aa",
      "type": "dashboardStatusBroker",
      "z": "be047adf.efd448",
      "g": "8107ad0873d7290c",
      "name": "UI Status Broker",
      "statusBroker": "5648aea3.4ed66",
      "sysConfig": "1642737a.30dccd",
      "timeBetweenUpdates": "1000",
      "timeToShowException": "10000",
      "allowResetEndsegmStats": true,
      "resetStatsStrategy": "operator",
      "resetStatsHour": "0",
      "resetStatsminute": "30",
      "resetStatsSecond": "0",
      "outputs": 2,
      "x": 1500,
      "y": 240,
      "wires": [
          [
              "7446c5f29a2e24cf"
          ],
          [
              "baba6b48d0d5b41d"
          ]
      ]
  },
  {
      "id": "24e4fb9f8178380c",
      "type": "userEventHandler",
      "z": "be047adf.efd448",
      "g": "8107ad0873d7290c",
      "name": "User event handler",
      "statusBroker": "5648aea3.4ed66",
      "sysConfig": "1642737a.30dccd",
      "outputs": 0,
      "x": 1870,
      "y": 260,
      "wires": []
  },
  {
      "id": "48854737a90387d7",
      "type": "ui_toast",
      "z": "be047adf.efd448",
      "g": "8107ad0873d7290c",
      "position": "dialog",
      "displayTime": "3",
      "highlight": "",
      "sendall": true,
      "outputs": 1,
      "ok": "OK",
      "cancel": "",
      "raw": true,
      "topic": "",
      "name": "dashboard alert",
      "x": 1500,
      "y": 120,
      "wires": [
          []
      ]
  },
  {
      "id": "7469d3c6cb966ed2",
      "type": "penkoScale",
      "z": "be047adf.efd448",
      "d": true,
      "g": "d0f9e0d6e6258576",
      "name": "scale1",
      "statusBroker": "5648aea3.4ed66",
      "host": "scale1.local",
      "port": 502,
      "precision": 10,
      "ioConnect": "e5903d21.b21808",
      "inputNoScaleBusy": "Scale.Busy",
      "inputNoScaleAlarm": "Scale.Alarm",
      "outputNoScaleRun": "Scale.Run",
      "readingDelay": "800",
      "outputs": 1,
      "x": 850,
      "y": 500,
      "wires": [
          [
              "19bf85778ba23374"
          ]
      ]
  },
  {
      "id": "b814753ac6041090",
      "type": "mergeControl",
      "z": "be047adf.efd448",
      "name": "MergeControl",
      "statusBroker": "5648aea3.4ed66",
      "delayWait": "0",
      "delayReady": "1200",
      "x": 240,
      "y": 760,
      "wires": [
          [
              "5556c19d32c7fe23"
          ]
      ]
  },
  {
      "id": "2be0a7ed47de906c",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "M18",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M18",
      "outputs": 0,
      "x": 990,
      "y": 1640,
      "wires": []
  },
  {
      "id": "c4bd6fd245acdf8e",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "M19",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M19",
      "outputs": 0,
      "x": 990,
      "y": 1720,
      "wires": []
  },
  {
      "id": "8721cdeffab5c562",
      "type": "laneSegment",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "M11 (merge target)",
      "projectConfig": "7169103ebb173261",
      "statusBroker": "",
      "beltLength": "1500",
      "beltType": "laneSensorlessNoStopZone",
      "beltHasSensor": true,
      "beltSpeed": "1350",
      "etaOffsetAfterBeltRestart": "",
      "stopOnInstrumentWait": false,
      "stopZoneLength": "300",
      "sensorPositionFromEnd": "300",
      "staticBeltRestartDelay": "",
      "noOfMotorsToStartDownstream": "",
      "idleTimeout": "",
      "endOfLaneSegment": false,
      "endOfLaneHasBeltMotor": false,
      "hasCongestionSensor": true,
      "congestionTime": 1500,
      "minSpacingType": "",
      "maxDeltaEarlyMM": "",
      "maxDeltaLateMM": "",
      "minGap": "",
      "outputs": 3,
      "x": 690,
      "y": 860,
      "wires": [
          [
              "52f8a22549a760f7"
          ],
          [
              "a6feae86a865509d"
          ],
          []
      ]
  },
  {
      "id": "a6feae86a865509d",
      "type": "laneSegment",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "M06 (after merge target)",
      "projectConfig": "7169103ebb173261",
      "statusBroker": "",
      "beltLength": "",
      "beltType": "laneRing",
      "beltHasSensor": true,
      "beltSpeed": "1350",
      "etaOffsetAfterBeltRestart": "",
      "stopOnInstrumentWait": false,
      "stopZoneLength": "",
      "sensorPositionFromEnd": "400",
      "staticBeltRestartDelay": "",
      "noOfMotorsToStartDownstream": "",
      "idleTimeout": "",
      "endOfLaneSegment": false,
      "endOfLaneHasBeltMotor": false,
      "hasCongestionSensor": true,
      "congestionTime": 1500,
      "minSpacingType": "",
      "maxDeltaEarlyMM": "",
      "maxDeltaLateMM": "",
      "minGap": "",
      "outputs": 3,
      "x": 710,
      "y": 940,
      "wires": [
          [
              "814e3bd05b5dd5c4"
          ],
          [
              "30f677afa66c9221"
          ],
          []
      ]
  },
  {
      "id": "30f677afa66c9221",
      "type": "laneSegment",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "M16 (curve1)",
      "projectConfig": "7169103ebb173261",
      "statusBroker": "",
      "beltLength": "1500",
      "beltType": "laneSensorlessNoStopZone",
      "beltHasSensor": true,
      "beltSpeed": "1350",
      "etaOffsetAfterBeltRestart": "",
      "stopOnInstrumentWait": false,
      "stopZoneLength": "300",
      "sensorPositionFromEnd": "300",
      "staticBeltRestartDelay": "",
      "noOfMotorsToStartDownstream": "",
      "idleTimeout": "",
      "endOfLaneSegment": false,
      "endOfLaneHasBeltMotor": false,
      "hasCongestionSensor": true,
      "congestionTime": 1500,
      "minSpacingType": "",
      "maxDeltaEarlyMM": "",
      "maxDeltaLateMM": "",
      "minGap": "",
      "outputs": 3,
      "x": 670,
      "y": 1020,
      "wires": [
          [
              "9d8e64a67ee27b1e"
          ],
          [
              "e1bdf3de907da5f2"
          ],
          []
      ]
  },
  {
      "id": "c18a7150783a6db6",
      "type": "binSensor",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "S03 (after merge target)",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "inputNo": "S03",
      "sendInitialState": false,
      "outputs": 1,
      "x": 400,
      "y": 940,
      "wires": [
          [
              "a6feae86a865509d"
          ]
      ]
  },
  {
      "id": "e1bdf3de907da5f2",
      "type": "laneSegment",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "M17 (curve2)",
      "projectConfig": "7169103ebb173261",
      "statusBroker": "",
      "beltLength": "1500",
      "beltType": "laneSensorlessNoStopZone",
      "beltHasSensor": true,
      "beltSpeed": "1350",
      "etaOffsetAfterBeltRestart": "",
      "stopOnInstrumentWait": false,
      "stopZoneLength": "300",
      "sensorPositionFromEnd": "300",
      "staticBeltRestartDelay": "",
      "noOfMotorsToStartDownstream": "",
      "idleTimeout": "",
      "endOfLaneSegment": false,
      "endOfLaneHasBeltMotor": false,
      "hasCongestionSensor": true,
      "congestionTime": 1500,
      "minSpacingType": "",
      "maxDeltaEarlyMM": "",
      "maxDeltaLateMM": "",
      "minGap": "",
      "outputs": 3,
      "x": 670,
      "y": 1100,
      "wires": [
          [
              "796cde9d56d35373"
          ],
          [
              "573f722f5578acfd"
          ],
          []
      ]
  },
  {
      "id": "573f722f5578acfd",
      "type": "laneSegment",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "M07 (before presorter)",
      "projectConfig": "7169103ebb173261",
      "statusBroker": "",
      "beltLength": "",
      "beltType": "lane",
      "beltHasSensor": true,
      "beltSpeed": "1350",
      "etaOffsetAfterBeltRestart": "",
      "stopOnInstrumentWait": false,
      "stopZoneLength": "",
      "sensorPositionFromEnd": "300",
      "staticBeltRestartDelay": "",
      "noOfMotorsToStartDownstream": "",
      "idleTimeout": "",
      "endOfLaneSegment": false,
      "endOfLaneHasBeltMotor": false,
      "hasCongestionSensor": true,
      "congestionTime": 1500,
      "minSpacingType": "",
      "maxDeltaEarlyMM": "",
      "maxDeltaLateMM": "",
      "minGap": "",
      "outputs": 3,
      "x": 700,
      "y": 1180,
      "wires": [
          [
              "e486312f9cd13b52"
          ],
          [
              "0d776c8e116409fd"
          ],
          []
      ]
  },
  {
      "id": "2a7265a6ec1a950a",
      "type": "binSensor",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "S04 (before WD01)",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "inputNo": "S04",
      "sendInitialState": false,
      "outputs": 1,
      "x": 410,
      "y": 1180,
      "wires": [
          [
              "573f722f5578acfd"
          ]
      ]
  },
  {
      "id": "0d776c8e116409fd",
      "type": "diverterWheel",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "M12 (WD01) (presorter)",
      "projectConfig": "7169103ebb173261",
      "isPreSorter": false,
      "preSortLeftLane": "3",
      "preSortRightLane": "4",
      "sortLaneLeft": "1",
      "sortLaneRight": "2",
      "diverterLength": "710",
      "passThroughVelocity": "1340",
      "diverterWidth": "800",
      "distanceFromSensorToWheel": "280",
      "idleTimeout": 300,
      "noOfMotorsToStartDownstream": 2,
      "outputs": 4,
      "x": 730,
      "y": 1280,
      "wires": [
          [
              "b1ef0ca0df6f84fc",
              "0725f30fbebf995a"
          ],
          [
              "9b586b7b37c4d2f5"
          ],
          [
              "83ec1ca3e0be853d"
          ],
          [
              "76e3ff312ca5d668"
          ]
      ]
  },
  {
      "id": "b1ef0ca0df6f84fc",
      "type": "diverterWheelDriver",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "M12 (WD01)",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNoRun": "M12",
      "outputNoTurnLeft": "WD01_Left",
      "outputNoTurnRight": "WD01_Right",
      "outputs": 0,
      "x": 1130,
      "y": 1220,
      "wires": []
  },
  {
      "id": "9b586b7b37c4d2f5",
      "type": "laneSegment",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "1",
      "projectConfig": "7169103ebb173261",
      "statusBroker": "5648aea3.4ed66",
      "beltType": "end",
      "beltHasSensor": false,
      "beltSpeed": "1340",
      "sensorPositionFromEnd": "240",
      "noOfMotorsToStartDownstream": 2,
      "idleTimeout": 60,
      "endOfLaneSegment": true,
      "endOfLaneHasBeltMotor": false,
      "hasCongestionSensor": false,
      "congestionTime": 1500,
      "outputs": 0,
      "x": 990,
      "y": 1260,
      "wires": []
  },
  {
      "id": "76e3ff312ca5d668",
      "type": "laneSegment",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "2",
      "projectConfig": "7169103ebb173261",
      "statusBroker": "5648aea3.4ed66",
      "beltType": "end",
      "beltHasSensor": true,
      "beltSpeed": "1340",
      "sensorPositionFromEnd": "240",
      "noOfMotorsToStartDownstream": 2,
      "idleTimeout": 60,
      "endOfLaneSegment": true,
      "endOfLaneHasBeltMotor": false,
      "hasCongestionSensor": false,
      "congestionTime": 1500,
      "outputs": 0,
      "x": 990,
      "y": 1300,
      "wires": []
  },
  {
      "id": "83ec1ca3e0be853d",
      "type": "laneSegment",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "M20 (before WD02)",
      "projectConfig": "7169103ebb173261",
      "statusBroker": "",
      "beltLength": "",
      "beltType": "laneRing",
      "beltHasSensor": true,
      "beltSpeed": "1360",
      "etaOffsetAfterBeltRestart": "",
      "stopOnInstrumentWait": false,
      "stopZoneLength": "",
      "sensorPositionFromEnd": "190",
      "staticBeltRestartDelay": "",
      "noOfMotorsToStartDownstream": "",
      "idleTimeout": "",
      "endOfLaneSegment": false,
      "endOfLaneHasBeltMotor": false,
      "hasCongestionSensor": true,
      "congestionTime": 1500,
      "minSpacingType": "backToFront",
      "maxDeltaEarlyMM": "",
      "maxDeltaLateMM": "",
      "minGap": "",
      "outputs": 3,
      "x": 690,
      "y": 1380,
      "wires": [
          [
              "4e337c232cb91462"
          ],
          [
              "d3d8446fbc47d4f0"
          ],
          []
      ]
  },
  {
      "id": "5025060101b1c0a6",
      "type": "binSensor",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "S05 (before WD02)",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "inputNo": "S05",
      "sendInitialState": false,
      "outputs": 1,
      "x": 410,
      "y": 1380,
      "wires": [
          [
              "83ec1ca3e0be853d"
          ]
      ]
  },
  {
      "id": "2ef19d2da90f87b9",
      "type": "binSensor",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "S10 congestion",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "inputNo": "S10",
      "outputs": 1,
      "x": 1220,
      "y": 1460,
      "wires": [
          [
              "a1ba419b837b9b2f"
          ]
      ]
  },
  {
      "id": "a1ba419b837b9b2f",
      "type": "laneSegment",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "3",
      "projectConfig": "7169103ebb173261",
      "statusBroker": "5648aea3.4ed66",
      "beltType": "end",
      "beltHasSensor": false,
      "beltSpeed": "1340",
      "sensorPositionFromEnd": "240",
      "noOfMotorsToStartDownstream": 2,
      "idleTimeout": 60,
      "endOfLaneSegment": true,
      "endOfLaneHasBeltMotor": false,
      "hasCongestionSensor": true,
      "congestionTime": 1500,
      "outputs": 0,
      "x": 990,
      "y": 1460,
      "wires": []
  },
  {
      "id": "99482bc8d5166eab",
      "type": "laneSegment",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "4",
      "projectConfig": "7169103ebb173261",
      "statusBroker": "5648aea3.4ed66",
      "beltLength": "",
      "beltType": "end",
      "beltHasSensor": true,
      "beltSpeed": "1340",
      "etaOffsetAfterBeltRestart": "",
      "stopOnInstrumentWait": false,
      "stopZoneLength": "",
      "sensorPositionFromEnd": "240",
      "staticBeltRestartDelay": "",
      "noOfMotorsToStartDownstream": 2,
      "idleTimeout": 60,
      "endOfLaneSegment": true,
      "endOfLaneHasBeltMotor": false,
      "hasCongestionSensor": true,
      "congestionTime": 1500,
      "minSpacingType": "",
      "maxDeltaEarlyMM": "",
      "maxDeltaLateMM": "",
      "minGap": "",
      "outputs": 0,
      "x": 990,
      "y": 1500,
      "wires": []
  },
  {
      "id": "b3342c2850b2ea62",
      "type": "diverterWheelDriver",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "M13 (WD02)",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNoRun": "M13",
      "outputNoTurnLeft": "WD02_Left",
      "outputNoTurnRight": "WD02_Right",
      "outputs": 0,
      "x": 1130,
      "y": 1420,
      "wires": []
  },
  {
      "id": "d3d8446fbc47d4f0",
      "type": "diverterWheel",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "M13 (WD02)",
      "projectConfig": "7169103ebb173261",
      "isPreSorter": false,
      "preSortLeftLane": "1,3",
      "preSortRightLane": "2,4",
      "sortLaneLeft": "3",
      "sortLaneRight": "4",
      "diverterLength": "710",
      "passThroughVelocity": "1340",
      "diverterWidth": "800",
      "distanceFromSensorToWheel": "300",
      "idleTimeout": 300,
      "noOfMotorsToStartDownstream": 2,
      "outputs": 4,
      "x": 690,
      "y": 1480,
      "wires": [
          [
              "b3342c2850b2ea62",
              "34bb5fb59b3b84bb"
          ],
          [
              "a1ba419b837b9b2f"
          ],
          [
              "7a64bed2e868597a"
          ],
          [
              "99482bc8d5166eab"
          ]
      ]
  },
  {
      "id": "7a64bed2e868597a",
      "type": "laneSegment",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "M08 (after WD02)",
      "projectConfig": "7169103ebb173261",
      "statusBroker": "",
      "beltLength": "",
      "beltType": "laneRing",
      "beltHasSensor": true,
      "beltSpeed": "1350",
      "etaOffsetAfterBeltRestart": "",
      "stopOnInstrumentWait": false,
      "stopZoneLength": "",
      "sensorPositionFromEnd": "300",
      "staticBeltRestartDelay": "",
      "noOfMotorsToStartDownstream": "",
      "idleTimeout": "",
      "endOfLaneSegment": false,
      "endOfLaneHasBeltMotor": false,
      "hasCongestionSensor": true,
      "congestionTime": 1500,
      "minSpacingType": "",
      "maxDeltaEarlyMM": "",
      "maxDeltaLateMM": "",
      "minGap": "",
      "outputs": 3,
      "x": 690,
      "y": 1580,
      "wires": [
          [
              "40945192f139cf66"
          ],
          [
              "c327a3f8027faa54"
          ],
          []
      ]
  },
  {
      "id": "652404481a2f7646",
      "type": "binSensor",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "S06 (after WD02)",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "inputNo": "S06",
      "sendInitialState": false,
      "outputs": 1,
      "x": 420,
      "y": 1580,
      "wires": [
          [
              "7a64bed2e868597a"
          ]
      ]
  },
  {
      "id": "c327a3f8027faa54",
      "type": "laneSegment",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "M18 (curve3)",
      "projectConfig": "7169103ebb173261",
      "statusBroker": "",
      "beltLength": "1500",
      "beltType": "laneSensorlessNoStopZone",
      "beltHasSensor": true,
      "beltSpeed": "1350",
      "etaOffsetAfterBeltRestart": "",
      "stopOnInstrumentWait": false,
      "stopZoneLength": "300",
      "sensorPositionFromEnd": "300",
      "staticBeltRestartDelay": "",
      "noOfMotorsToStartDownstream": "",
      "idleTimeout": "",
      "endOfLaneSegment": false,
      "endOfLaneHasBeltMotor": false,
      "hasCongestionSensor": true,
      "congestionTime": 1500,
      "minSpacingType": "",
      "maxDeltaEarlyMM": "",
      "maxDeltaLateMM": "",
      "minGap": "",
      "outputs": 3,
      "x": 670,
      "y": 1660,
      "wires": [
          [
              "2be0a7ed47de906c"
          ],
          [
              "b50984606155ab62"
          ],
          []
      ]
  },
  {
      "id": "b50984606155ab62",
      "type": "laneSegment",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "M19 (curve4)",
      "projectConfig": "7169103ebb173261",
      "statusBroker": "",
      "beltLength": "1500",
      "beltType": "laneSensorlessNoStopZone",
      "beltHasSensor": true,
      "beltSpeed": "1350",
      "etaOffsetAfterBeltRestart": "",
      "stopOnInstrumentWait": false,
      "stopZoneLength": "300",
      "sensorPositionFromEnd": "300",
      "staticBeltRestartDelay": "",
      "noOfMotorsToStartDownstream": "",
      "idleTimeout": "",
      "endOfLaneSegment": false,
      "endOfLaneHasBeltMotor": false,
      "hasCongestionSensor": true,
      "congestionTime": 1500,
      "minSpacingType": "",
      "maxDeltaEarlyMM": "",
      "maxDeltaLateMM": "",
      "minGap": "",
      "outputs": 3,
      "x": 670,
      "y": 1740,
      "wires": [
          [
              "c4bd6fd245acdf8e"
          ],
          [
              "3a4c5eb03128a018"
          ],
          []
      ]
  },
  {
      "id": "3a4c5eb03128a018",
      "type": "laneSegment",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "M09 (after curve4)",
      "projectConfig": "7169103ebb173261",
      "statusBroker": "",
      "beltLength": "1500",
      "beltType": "laneRing",
      "beltHasSensor": true,
      "beltSpeed": "1350",
      "etaOffsetAfterBeltRestart": "",
      "stopOnInstrumentWait": false,
      "stopZoneLength": "330",
      "sensorPositionFromEnd": "330",
      "staticBeltRestartDelay": "",
      "noOfMotorsToStartDownstream": "",
      "idleTimeout": "",
      "endOfLaneSegment": false,
      "endOfLaneHasBeltMotor": false,
      "hasCongestionSensor": true,
      "congestionTime": 1500,
      "minSpacingType": "",
      "maxDeltaEarlyMM": "",
      "maxDeltaLateMM": "",
      "minGap": "",
      "outputs": 3,
      "x": 690,
      "y": 1820,
      "wires": [
          [
              "42227d3335555497"
          ],
          [
              "d7ced7a7a63a7b78"
          ],
          []
      ]
  },
  {
      "id": "d7ced7a7a63a7b78",
      "type": "laneSegment",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "M10 (before merge target)",
      "projectConfig": "7169103ebb173261",
      "statusBroker": "",
      "beltLength": "1500",
      "beltType": "laneSensorlessNoStopZone",
      "beltHasSensor": true,
      "beltSpeed": "1350",
      "etaOffsetAfterBeltRestart": "",
      "stopOnInstrumentWait": false,
      "stopZoneLength": "300",
      "sensorPositionFromEnd": "300",
      "staticBeltRestartDelay": "",
      "noOfMotorsToStartDownstream": "",
      "idleTimeout": "",
      "endOfLaneSegment": false,
      "endOfLaneHasBeltMotor": false,
      "hasCongestionSensor": true,
      "congestionTime": 1500,
      "minSpacingType": "",
      "maxDeltaEarlyMM": "",
      "maxDeltaLateMM": "",
      "minGap": "",
      "outputs": 3,
      "x": 710,
      "y": 1900,
      "wires": [
          [
              "45fc16aa91bacc03"
          ],
          [
              "cf477f9d06ee9bd7"
          ],
          []
      ]
  },
  {
      "id": "c92977736bc11d29",
      "type": "binSensor",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "S07 (before merge target)",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "inputNo": "S07",
      "sendInitialState": false,
      "outputs": 1,
      "x": 390,
      "y": 1820,
      "wires": [
          [
              "b814753ac6041090",
              "3a4c5eb03128a018"
          ]
      ]
  },
  {
      "id": "cf477f9d06ee9bd7",
      "type": "ringLapCounter",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "RingLapCounter",
      "statusBroker": "5648aea3.4ed66",
      "maxLaps": "1",
      "x": 160,
      "y": 2020,
      "wires": [
          [
              "8721cdeffab5c562"
          ]
      ]
  },
  {
      "id": "b560b8bfd1db4438",
      "type": "dwsInject",
      "z": "be047adf.efd448",
      "messageType": "trigger/wakeup",
      "delayBetweenMessages": "",
      "howManyToWakeup": "20",
      "pkgId": "",
      "stopReason": "",
      "sensorName": "",
      "source": "",
      "outputs": 1,
      "x": 220,
      "y": 180,
      "wires": [
          [
              "2abb3e4d654c7a33"
          ]
      ]
  },
  {
      "id": "30e025b9ef60b234",
      "type": "dwsInject",
      "z": "be047adf.efd448",
      "messageType": "hq.systemStop",
      "delayBetweenMessages": "",
      "howManyToWakeup": "",
      "pkgId": "",
      "stopReason": "",
      "sensorName": "",
      "source": "",
      "outputs": 1,
      "x": 220,
      "y": 260,
      "wires": [
          []
      ]
  },
  {
      "id": "2cfded3a46922667",
      "type": "dwsInject",
      "z": "be047adf.efd448",
      "messageType": "hq.systemStart",
      "delayBetweenMessages": "",
      "howManyToWakeup": "",
      "pkgId": "",
      "stopReason": "",
      "sensorName": "",
      "source": "",
      "outputs": 1,
      "x": 220,
      "y": 320,
      "wires": [
          []
      ]
  },
  {
      "id": "bed4956e8e9de4ad",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "d": true,
      "g": "884cb4a3a6cca981",
      "name": "M06",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M06",
      "outputs": 0,
      "x": 2430,
      "y": 900,
      "wires": []
  },
  {
      "id": "dbbc511810a09345",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "d": true,
      "g": "884cb4a3a6cca981",
      "name": "M07",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M07",
      "outputs": 0,
      "x": 2430,
      "y": 1140,
      "wires": []
  },
  {
      "id": "93201d9a30d824e5",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "d": true,
      "g": "884cb4a3a6cca981",
      "name": "M08",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M08",
      "outputs": 0,
      "x": 2430,
      "y": 1520,
      "wires": []
  },
  {
      "id": "74c3633463b783ed",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "d": true,
      "g": "884cb4a3a6cca981",
      "name": "M16",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M16",
      "outputs": 0,
      "x": 2430,
      "y": 980,
      "wires": []
  },
  {
      "id": "eb2071416d4b5bb2",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "d": true,
      "g": "884cb4a3a6cca981",
      "name": "M17",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M17",
      "outputs": 0,
      "x": 2430,
      "y": 1060,
      "wires": []
  },
  {
      "id": "508fd4b21ada3fd8",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "d": true,
      "g": "884cb4a3a6cca981",
      "name": "M20",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M20",
      "outputs": 0,
      "x": 2430,
      "y": 1320,
      "wires": []
  },
  {
      "id": "b7bac5299f84d5cd",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "d": true,
      "g": "884cb4a3a6cca981",
      "name": "M18",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M18",
      "outputs": 0,
      "x": 2430,
      "y": 1620,
      "wires": []
  },
  {
      "id": "63f394219342f020",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "d": true,
      "g": "884cb4a3a6cca981",
      "name": "M19",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M19",
      "outputs": 0,
      "x": 2430,
      "y": 1700,
      "wires": []
  },
  {
      "id": "cfb4b741f7187dd2",
      "type": "binSensor",
      "z": "be047adf.efd448",
      "d": true,
      "g": "884cb4a3a6cca981",
      "name": "S03 (after merge target)",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "inputNo": "S03",
      "sendInitialState": false,
      "outputs": 1,
      "x": 1840,
      "y": 920,
      "wires": [
          [
              "6063c3108320fd12"
          ]
      ]
  },
  {
      "id": "59d7a68a11d26762",
      "type": "laneSegment",
      "z": "be047adf.efd448",
      "d": true,
      "g": "884cb4a3a6cca981",
      "name": "M07 (before presorter)",
      "projectConfig": "7169103ebb173261",
      "statusBroker": "",
      "beltLength": "",
      "beltType": "lane",
      "beltHasSensor": true,
      "beltSpeed": "386",
      "etaOffsetAfterBeltRestart": "",
      "stopOnInstrumentWait": false,
      "stopZoneLength": "",
      "sensorPositionFromEnd": "300",
      "staticBeltRestartDelay": "",
      "noOfMotorsToStartDownstream": "",
      "idleTimeout": "",
      "endOfLaneSegment": false,
      "endOfLaneHasBeltMotor": false,
      "hasCongestionSensor": true,
      "congestionTime": 1500,
      "minSpacingType": "",
      "maxDeltaEarlyMM": "",
      "maxDeltaLateMM": "",
      "minGap": "",
      "outputs": 3,
      "x": 2140,
      "y": 1160,
      "wires": [
          [
              "dbbc511810a09345"
          ],
          [
              "c3125f9e34084b54"
          ],
          []
      ]
  },
  {
      "id": "d44349e4c59ea788",
      "type": "binSensor",
      "z": "be047adf.efd448",
      "d": true,
      "g": "884cb4a3a6cca981",
      "name": "S04 (before WD01)",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "inputNo": "S04",
      "sendInitialState": false,
      "outputs": 1,
      "x": 1850,
      "y": 1160,
      "wires": [
          [
              "59d7a68a11d26762"
          ]
      ]
  },
  {
      "id": "c3125f9e34084b54",
      "type": "laneSegment",
      "z": "be047adf.efd448",
      "d": true,
      "g": "884cb4a3a6cca981",
      "name": "M20 (before WD02)",
      "projectConfig": "7169103ebb173261",
      "statusBroker": "",
      "beltLength": "",
      "beltType": "infeedDynamicSpeedFirstBeltSpeedups",
      "beltHasSensor": true,
      "beltSpeed": "800",
      "etaOffsetAfterBeltRestart": "",
      "stopOnInstrumentWait": false,
      "stopZoneLength": "",
      "sensorPositionFromEnd": "150",
      "staticBeltRestartDelay": "",
      "noOfMotorsToStartDownstream": "",
      "idleTimeout": "",
      "endOfLaneSegment": false,
      "endOfLaneHasBeltMotor": false,
      "hasCongestionSensor": true,
      "congestionTime": 1500,
      "minSpacingType": "backToFront",
      "maxDeltaEarlyMM": "",
      "maxDeltaLateMM": "",
      "minGap": "",
      "outputs": 3,
      "x": 2130,
      "y": 1360,
      "wires": [
          [
              "508fd4b21ada3fd8",
              "804ba8c0076025a3"
          ],
          [
              "686c0086ee6a4275"
          ],
          []
      ]
  },
  {
      "id": "d5b09716aa93038e",
      "type": "binSensor",
      "z": "be047adf.efd448",
      "d": true,
      "g": "884cb4a3a6cca981",
      "name": "S05 (before WD02)",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "inputNo": "S05",
      "sendInitialState": false,
      "outputs": 1,
      "x": 1850,
      "y": 1360,
      "wires": [
          [
              "c3125f9e34084b54"
          ]
      ]
  },
  {
      "id": "5d74871404416504",
      "type": "binSensor",
      "z": "be047adf.efd448",
      "d": true,
      "g": "884cb4a3a6cca981",
      "name": "S06 (after WD02)",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "inputNo": "S06",
      "sendInitialState": false,
      "outputs": 1,
      "x": 1860,
      "y": 1560,
      "wires": [
          [
              "5052f5a8154563f2"
          ]
      ]
  },
  {
      "id": "950dd906954d05b7",
      "type": "laneSegment",
      "z": "be047adf.efd448",
      "d": true,
      "g": "884cb4a3a6cca981",
      "name": "M09 (after curve4)",
      "projectConfig": "7169103ebb173261",
      "statusBroker": "",
      "beltLength": "1500",
      "beltType": "laneSensorlessStopZone",
      "beltHasSensor": true,
      "beltSpeed": "1350",
      "etaOffsetAfterBeltRestart": "",
      "stopOnInstrumentWait": false,
      "stopZoneLength": "300",
      "sensorPositionFromEnd": "300",
      "staticBeltRestartDelay": "",
      "noOfMotorsToStartDownstream": "",
      "idleTimeout": "",
      "endOfLaneSegment": false,
      "endOfLaneHasBeltMotor": false,
      "hasCongestionSensor": true,
      "congestionTime": 1500,
      "minSpacingType": "",
      "maxDeltaEarlyMM": "",
      "maxDeltaLateMM": "",
      "minGap": "",
      "outputs": 3,
      "x": 2130,
      "y": 1800,
      "wires": [
          [
              "bbdf8c8e990aeeb1",
              "037a9df5f613f436"
          ],
          [
              "e74ab67fd53f7407"
          ],
          []
      ]
  },
  {
      "id": "a10a57e2d5798531",
      "type": "binSensor",
      "z": "be047adf.efd448",
      "d": true,
      "g": "884cb4a3a6cca981",
      "name": "S07 (before merge target)",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "inputNo": "S07",
      "sendInitialState": false,
      "outputs": 1,
      "x": 1850,
      "y": 1800,
      "wires": [
          [
              "950dd906954d05b7"
          ]
      ]
  },
  {
      "id": "686c0086ee6a4275",
      "type": "laneSegment",
      "z": "be047adf.efd448",
      "d": true,
      "g": "884cb4a3a6cca981",
      "name": "M13 (WD02)",
      "projectConfig": "7169103ebb173261",
      "statusBroker": "",
      "beltLength": "1000",
      "beltType": "infeedSensorless",
      "beltHasSensor": true,
      "beltSpeed": "970",
      "etaOffsetAfterBeltRestart": "",
      "stopOnInstrumentWait": false,
      "stopZoneLength": "",
      "sensorPositionFromEnd": "100",
      "staticBeltRestartDelay": "",
      "noOfMotorsToStartDownstream": "",
      "idleTimeout": "",
      "endOfLaneSegment": false,
      "endOfLaneHasBeltMotor": false,
      "hasCongestionSensor": true,
      "congestionTime": 1500,
      "minSpacingType": "backToFront",
      "maxDeltaEarlyMM": "",
      "maxDeltaLateMM": "",
      "minGap": "",
      "outputs": 3,
      "x": 2110,
      "y": 1440,
      "wires": [
          [
              "10ccf3e541fdf8cf"
          ],
          [
              "5052f5a8154563f2"
          ],
          []
      ]
  },
  {
      "id": "5052f5a8154563f2",
      "type": "scanBeltCon",
      "z": "be047adf.efd448",
      "d": true,
      "g": "884cb4a3a6cca981",
      "name": "M08 (after WD02)",
      "projectConfig": "7169103ebb173261",
      "statusBroker": "5648aea3.4ed66",
      "etaOffsetAfterBeltRestart": "",
      "scanBeltLength": "1500",
      "scanBeltVelocity": "1350",
      "triggerSensorPos": "1400",
      "minGap": "0",
      "minSpacingType": "backToFront",
      "minSpacing": "0",
      "noOfMotorsToStartDownstream": "",
      "stopZoneLength": "100",
      "idleTimeout": "300",
      "disableInstrumentWait": false,
      "outputs": 4,
      "x": 2130,
      "y": 1540,
      "wires": [
          [],
          [
              "93201d9a30d824e5",
              "b7bac5299f84d5cd",
              "63f394219342f020"
          ],
          [],
          [
              "950dd906954d05b7"
          ]
      ]
  },
  {
      "id": "804ba8c0076025a3",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "d": true,
      "g": "884cb4a3a6cca981",
      "name": "M12",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M12",
      "outputs": 0,
      "x": 2430,
      "y": 1260,
      "wires": []
  },
  {
      "id": "6063c3108320fd12",
      "type": "laneSegment",
      "z": "be047adf.efd448",
      "d": true,
      "g": "884cb4a3a6cca981",
      "name": "M06 (after merge target)",
      "projectConfig": "7169103ebb173261",
      "statusBroker": "",
      "beltLength": "",
      "beltType": "lane",
      "beltHasSensor": true,
      "beltSpeed": "1350",
      "etaOffsetAfterBeltRestart": "",
      "stopOnInstrumentWait": false,
      "stopZoneLength": "",
      "sensorPositionFromEnd": "300",
      "staticBeltRestartDelay": "",
      "noOfMotorsToStartDownstream": "",
      "idleTimeout": "",
      "endOfLaneSegment": false,
      "endOfLaneHasBeltMotor": false,
      "hasCongestionSensor": true,
      "congestionTime": 1500,
      "minSpacingType": "",
      "maxDeltaEarlyMM": "",
      "maxDeltaLateMM": "",
      "minGap": "",
      "outputs": 3,
      "x": 2150,
      "y": 920,
      "wires": [
          [
              "bed4956e8e9de4ad",
              "74c3633463b783ed",
              "eb2071416d4b5bb2",
              "fe37479312cc47a8"
          ],
          [
              "59d7a68a11d26762"
          ],
          []
      ]
  },
  {
      "id": "8b15b1624398d6f7",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "d": true,
      "g": "ed186c194cd4b694",
      "name": "M07",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M07",
      "outputs": 0,
      "x": 3290,
      "y": 840,
      "wires": []
  },
  {
      "id": "086e7895c1265529",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "d": true,
      "g": "ed186c194cd4b694",
      "name": "M08",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M08",
      "outputs": 0,
      "x": 3290,
      "y": 1220,
      "wires": []
  },
  {
      "id": "f8a58b98870429e3",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "d": true,
      "g": "ed186c194cd4b694",
      "name": "M20",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M20",
      "outputs": 0,
      "x": 3290,
      "y": 1020,
      "wires": []
  },
  {
      "id": "c95bcee4d8b56cae",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "d": true,
      "g": "ed186c194cd4b694",
      "name": "M18",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M18",
      "outputs": 0,
      "x": 3290,
      "y": 1320,
      "wires": []
  },
  {
      "id": "3e469c6337dd9b5e",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "d": true,
      "g": "ed186c194cd4b694",
      "name": "M19",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M19",
      "outputs": 0,
      "x": 3290,
      "y": 1400,
      "wires": []
  },
  {
      "id": "90975cb18f1564e1",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "d": true,
      "g": "ed186c194cd4b694",
      "name": "M09",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M09",
      "outputs": 0,
      "x": 3290,
      "y": 1480,
      "wires": []
  },
  {
      "id": "64694807792dd2b4",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "d": true,
      "g": "ed186c194cd4b694",
      "name": "M10",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M10",
      "outputs": 0,
      "x": 3290,
      "y": 1560,
      "wires": []
  },
  {
      "id": "2995dbf1cd2ef3be",
      "type": "laneSegment",
      "z": "be047adf.efd448",
      "d": true,
      "g": "ed186c194cd4b694",
      "name": "M07 (before presorter)",
      "projectConfig": "7169103ebb173261",
      "statusBroker": "",
      "beltLength": "",
      "beltType": "lane",
      "beltHasSensor": true,
      "beltSpeed": "1350",
      "etaOffsetAfterBeltRestart": "",
      "stopOnInstrumentWait": false,
      "stopZoneLength": "",
      "sensorPositionFromEnd": "300",
      "staticBeltRestartDelay": "",
      "noOfMotorsToStartDownstream": "",
      "idleTimeout": "",
      "endOfLaneSegment": false,
      "endOfLaneHasBeltMotor": false,
      "hasCongestionSensor": true,
      "congestionTime": 1500,
      "minSpacingType": "",
      "maxDeltaEarlyMM": "",
      "maxDeltaLateMM": "",
      "minGap": "",
      "outputs": 3,
      "x": 3000,
      "y": 860,
      "wires": [
          [
              "8b15b1624398d6f7"
          ],
          [
              "0d6aa51b24ae62ec"
          ],
          []
      ]
  },
  {
      "id": "36064861ef3752ea",
      "type": "binSensor",
      "z": "be047adf.efd448",
      "d": true,
      "g": "ed186c194cd4b694",
      "name": "S04 (before WD01)",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "inputNo": "S04",
      "sendInitialState": false,
      "outputs": 1,
      "x": 2710,
      "y": 860,
      "wires": [
          [
              "2995dbf1cd2ef3be"
          ]
      ]
  },
  {
      "id": "0d6aa51b24ae62ec",
      "type": "laneSegment",
      "z": "be047adf.efd448",
      "d": true,
      "g": "ed186c194cd4b694",
      "name": "M20 (before WD02)",
      "projectConfig": "7169103ebb173261",
      "statusBroker": "",
      "beltLength": "",
      "beltType": "lane",
      "beltHasSensor": true,
      "beltSpeed": "1350",
      "etaOffsetAfterBeltRestart": "",
      "stopOnInstrumentWait": false,
      "stopZoneLength": "",
      "sensorPositionFromEnd": "150",
      "staticBeltRestartDelay": "",
      "noOfMotorsToStartDownstream": "",
      "idleTimeout": "",
      "endOfLaneSegment": false,
      "endOfLaneHasBeltMotor": false,
      "hasCongestionSensor": true,
      "congestionTime": 1500,
      "minSpacingType": "backToFront",
      "maxDeltaEarlyMM": "",
      "maxDeltaLateMM": "",
      "minGap": "",
      "outputs": 3,
      "x": 2990,
      "y": 1060,
      "wires": [
          [
              "f8a58b98870429e3",
              "46864a4d69857eba"
          ],
          [
              "2fa82b56dbe244e1"
          ],
          []
      ]
  },
  {
      "id": "91a5073c9c085f46",
      "type": "binSensor",
      "z": "be047adf.efd448",
      "d": true,
      "g": "ed186c194cd4b694",
      "name": "S05 (before WD02)",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "inputNo": "S05",
      "sendInitialState": false,
      "outputs": 1,
      "x": 2710,
      "y": 1060,
      "wires": [
          [
              "0d6aa51b24ae62ec"
          ]
      ]
  },
  {
      "id": "d240b6813d12c899",
      "type": "binSensor",
      "z": "be047adf.efd448",
      "d": true,
      "g": "ed186c194cd4b694",
      "name": "S06 (after WD02)",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "inputNo": "S06",
      "sendInitialState": false,
      "outputs": 1,
      "x": 2720,
      "y": 1260,
      "wires": [
          [
              "7e9850d297b906d5"
          ]
      ]
  },
  {
      "id": "4531e25fd4bf6dcf",
      "type": "laneSegment",
      "z": "be047adf.efd448",
      "d": true,
      "g": "ed186c194cd4b694",
      "name": "M18 (curve3)",
      "projectConfig": "7169103ebb173261",
      "statusBroker": "",
      "beltLength": "1500",
      "beltType": "laneSensorlessStopZone",
      "beltHasSensor": true,
      "beltSpeed": "1350",
      "etaOffsetAfterBeltRestart": "",
      "stopOnInstrumentWait": false,
      "stopZoneLength": "300",
      "sensorPositionFromEnd": "300",
      "staticBeltRestartDelay": "",
      "noOfMotorsToStartDownstream": "",
      "idleTimeout": "",
      "endOfLaneSegment": false,
      "endOfLaneHasBeltMotor": false,
      "hasCongestionSensor": true,
      "congestionTime": 1500,
      "minSpacingType": "",
      "maxDeltaEarlyMM": "",
      "maxDeltaLateMM": "",
      "minGap": "",
      "outputs": 3,
      "x": 2970,
      "y": 1340,
      "wires": [
          [
              "c95bcee4d8b56cae"
          ],
          [
              "74c3ab723a8fcdef"
          ],
          []
      ]
  },
  {
      "id": "74c3ab723a8fcdef",
      "type": "laneSegment",
      "z": "be047adf.efd448",
      "d": true,
      "g": "ed186c194cd4b694",
      "name": "M19 (curve4)",
      "projectConfig": "7169103ebb173261",
      "statusBroker": "",
      "beltLength": "1500",
      "beltType": "laneSensorlessStopZone",
      "beltHasSensor": true,
      "beltSpeed": "1350",
      "etaOffsetAfterBeltRestart": "",
      "stopOnInstrumentWait": false,
      "stopZoneLength": "300",
      "sensorPositionFromEnd": "300",
      "staticBeltRestartDelay": "",
      "noOfMotorsToStartDownstream": "",
      "idleTimeout": "",
      "endOfLaneSegment": false,
      "endOfLaneHasBeltMotor": false,
      "hasCongestionSensor": true,
      "congestionTime": 1500,
      "minSpacingType": "",
      "maxDeltaEarlyMM": "",
      "maxDeltaLateMM": "",
      "minGap": "",
      "outputs": 3,
      "x": 2970,
      "y": 1420,
      "wires": [
          [
              "3e469c6337dd9b5e"
          ],
          [
              "1be5255ce889fad8"
          ],
          []
      ]
  },
  {
      "id": "1be5255ce889fad8",
      "type": "laneSegment",
      "z": "be047adf.efd448",
      "d": true,
      "g": "ed186c194cd4b694",
      "name": "M09 (after curve4)",
      "projectConfig": "7169103ebb173261",
      "statusBroker": "",
      "beltLength": "1500",
      "beltType": "lane",
      "beltHasSensor": true,
      "beltSpeed": "350",
      "etaOffsetAfterBeltRestart": "",
      "stopOnInstrumentWait": false,
      "stopZoneLength": "300",
      "sensorPositionFromEnd": "330",
      "staticBeltRestartDelay": "",
      "noOfMotorsToStartDownstream": "",
      "idleTimeout": "",
      "endOfLaneSegment": false,
      "endOfLaneHasBeltMotor": false,
      "hasCongestionSensor": true,
      "congestionTime": 1500,
      "minSpacingType": "backToFront",
      "maxDeltaEarlyMM": "",
      "maxDeltaLateMM": "",
      "minGap": "",
      "outputs": 3,
      "x": 2990,
      "y": 1500,
      "wires": [
          [
              "90975cb18f1564e1"
          ],
          [
              "7465f1afcb57d283"
          ],
          []
      ]
  },
  {
      "id": "7465f1afcb57d283",
      "type": "laneSegment",
      "z": "be047adf.efd448",
      "d": true,
      "g": "ed186c194cd4b694",
      "name": "M10 (before merge target)",
      "projectConfig": "7169103ebb173261",
      "statusBroker": "",
      "beltLength": "1500",
      "beltType": "infeedDynamicSpeedFirstBeltSpeedups",
      "beltHasSensor": true,
      "beltSpeed": "1000",
      "etaOffsetAfterBeltRestart": "",
      "stopOnInstrumentWait": false,
      "stopZoneLength": "",
      "sensorPositionFromEnd": "390",
      "staticBeltRestartDelay": "",
      "noOfMotorsToStartDownstream": "",
      "idleTimeout": "",
      "endOfLaneSegment": false,
      "endOfLaneHasBeltMotor": false,
      "hasCongestionSensor": true,
      "congestionTime": 1500,
      "minSpacingType": "backToFront",
      "maxDeltaEarlyMM": "",
      "maxDeltaLateMM": "",
      "minGap": "",
      "outputs": 3,
      "x": 3010,
      "y": 1580,
      "wires": [
          [
              "64694807792dd2b4"
          ],
          [
              "648a574e903eea8a"
          ],
          []
      ]
  },
  {
      "id": "3cd2e7e56731da54",
      "type": "binSensor",
      "z": "be047adf.efd448",
      "d": true,
      "g": "ed186c194cd4b694",
      "name": "S07 (before merge target)",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "inputNo": "S07",
      "sendInitialState": false,
      "outputs": 1,
      "x": 2710,
      "y": 1500,
      "wires": [
          [
              "1be5255ce889fad8"
          ]
      ]
  },
  {
      "id": "2fa82b56dbe244e1",
      "type": "laneSegment",
      "z": "be047adf.efd448",
      "d": true,
      "g": "ed186c194cd4b694",
      "name": "M13 (WD02)",
      "projectConfig": "7169103ebb173261",
      "statusBroker": "",
      "beltLength": "1000",
      "beltType": "infeedSensorless",
      "beltHasSensor": true,
      "beltSpeed": "1350",
      "etaOffsetAfterBeltRestart": "",
      "stopOnInstrumentWait": false,
      "stopZoneLength": "",
      "sensorPositionFromEnd": "100",
      "staticBeltRestartDelay": "",
      "noOfMotorsToStartDownstream": "",
      "idleTimeout": "",
      "endOfLaneSegment": false,
      "endOfLaneHasBeltMotor": false,
      "hasCongestionSensor": true,
      "congestionTime": 1500,
      "minSpacingType": "backToFront",
      "maxDeltaEarlyMM": "",
      "maxDeltaLateMM": "",
      "minGap": "",
      "outputs": 3,
      "x": 2970,
      "y": 1140,
      "wires": [
          [
              "744007810b2f3c7b"
          ],
          [
              "7e9850d297b906d5"
          ],
          []
      ]
  },
  {
      "id": "744007810b2f3c7b",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "d": true,
      "g": "ed186c194cd4b694",
      "name": "M13",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M20",
      "outputs": 0,
      "x": 3290,
      "y": 1100,
      "wires": []
  },
  {
      "id": "46864a4d69857eba",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "d": true,
      "g": "ed186c194cd4b694",
      "name": "M12",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M20",
      "outputs": 0,
      "x": 3290,
      "y": 960,
      "wires": []
  },
  {
      "id": "e74ab67fd53f7407",
      "type": "laneSegment",
      "z": "be047adf.efd448",
      "d": true,
      "g": "884cb4a3a6cca981",
      "name": "END",
      "projectConfig": "7169103ebb173261",
      "statusBroker": "",
      "beltLength": "",
      "beltType": "end",
      "beltHasSensor": true,
      "beltSpeed": "",
      "etaOffsetAfterBeltRestart": "",
      "stopOnInstrumentWait": false,
      "stopZoneLength": "",
      "sensorPositionFromEnd": "",
      "staticBeltRestartDelay": "",
      "noOfMotorsToStartDownstream": "",
      "idleTimeout": "",
      "endOfLaneSegment": false,
      "endOfLaneHasBeltMotor": false,
      "hasCongestionSensor": false,
      "congestionTime": 1500,
      "minSpacingType": "",
      "maxDeltaEarlyMM": "",
      "maxDeltaLateMM": "",
      "minGap": "",
      "outputs": 0,
      "x": 2090,
      "y": 1880,
      "wires": []
  },
  {
      "id": "648a574e903eea8a",
      "type": "laneSegment",
      "z": "be047adf.efd448",
      "d": true,
      "g": "ed186c194cd4b694",
      "name": "M11 (merge target)",
      "projectConfig": "7169103ebb173261",
      "statusBroker": "",
      "beltLength": "1500",
      "beltType": "infeedSensorless",
      "beltHasSensor": true,
      "beltSpeed": "1000",
      "etaOffsetAfterBeltRestart": "",
      "stopOnInstrumentWait": false,
      "stopZoneLength": "300",
      "sensorPositionFromEnd": "300",
      "staticBeltRestartDelay": "",
      "noOfMotorsToStartDownstream": "",
      "idleTimeout": "",
      "endOfLaneSegment": false,
      "endOfLaneHasBeltMotor": false,
      "hasCongestionSensor": true,
      "congestionTime": 1500,
      "minSpacingType": "",
      "maxDeltaEarlyMM": "",
      "maxDeltaLateMM": "",
      "minGap": "",
      "outputs": 3,
      "x": 2990,
      "y": 1660,
      "wires": [
          [
              "3b03398361712834"
          ],
          [
              "eed2c746802a2a0f"
          ],
          []
      ]
  },
  {
      "id": "3b03398361712834",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "d": true,
      "g": "ed186c194cd4b694",
      "name": "M11",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M11",
      "outputs": 0,
      "x": 3290,
      "y": 1640,
      "wires": []
  },
  {
      "id": "4827b87915cb8562",
      "type": "binSensor",
      "z": "be047adf.efd448",
      "d": true,
      "g": "ed186c194cd4b694",
      "name": "S03 (after merge target)",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "inputNo": "S03",
      "sendInitialState": false,
      "outputs": 1,
      "x": 2700,
      "y": 1740,
      "wires": [
          [
              "eed2c746802a2a0f"
          ]
      ]
  },
  {
      "id": "eed2c746802a2a0f",
      "type": "laneSegment",
      "z": "be047adf.efd448",
      "d": true,
      "g": "ed186c194cd4b694",
      "name": "M06 (after merge target)",
      "projectConfig": "7169103ebb173261",
      "statusBroker": "",
      "beltLength": "",
      "beltType": "lane",
      "beltHasSensor": true,
      "beltSpeed": "1350",
      "etaOffsetAfterBeltRestart": "",
      "stopOnInstrumentWait": false,
      "stopZoneLength": "",
      "sensorPositionFromEnd": "300",
      "staticBeltRestartDelay": "",
      "noOfMotorsToStartDownstream": "",
      "idleTimeout": "",
      "endOfLaneSegment": false,
      "endOfLaneHasBeltMotor": false,
      "hasCongestionSensor": true,
      "congestionTime": 1500,
      "minSpacingType": "",
      "maxDeltaEarlyMM": "",
      "maxDeltaLateMM": "",
      "minGap": "",
      "outputs": 3,
      "x": 3010,
      "y": 1740,
      "wires": [
          [
              "16b7e62cc77e6631",
              "9d4733db04bc6d76",
              "220ae5df3284e7e2"
          ],
          [
              "01b88c86119526dc"
          ],
          []
      ]
  },
  {
      "id": "16b7e62cc77e6631",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "d": true,
      "g": "ed186c194cd4b694",
      "name": "M06",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M06",
      "outputs": 0,
      "x": 3290,
      "y": 1720,
      "wires": []
  },
  {
      "id": "9d4733db04bc6d76",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "d": true,
      "g": "ed186c194cd4b694",
      "name": "M16",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M16",
      "outputs": 0,
      "x": 3290,
      "y": 1780,
      "wires": []
  },
  {
      "id": "220ae5df3284e7e2",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "d": true,
      "g": "ed186c194cd4b694",
      "name": "M17",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M17",
      "outputs": 0,
      "x": 3290,
      "y": 1840,
      "wires": []
  },
  {
      "id": "01b88c86119526dc",
      "type": "laneSegment",
      "z": "be047adf.efd448",
      "d": true,
      "g": "ed186c194cd4b694",
      "name": "END",
      "projectConfig": "7169103ebb173261",
      "statusBroker": "",
      "beltLength": "",
      "beltType": "end",
      "beltHasSensor": true,
      "beltSpeed": "",
      "etaOffsetAfterBeltRestart": "",
      "stopOnInstrumentWait": false,
      "stopZoneLength": "",
      "sensorPositionFromEnd": "",
      "staticBeltRestartDelay": "",
      "noOfMotorsToStartDownstream": "",
      "idleTimeout": "",
      "endOfLaneSegment": false,
      "endOfLaneHasBeltMotor": false,
      "hasCongestionSensor": false,
      "congestionTime": 1500,
      "minSpacingType": "",
      "maxDeltaEarlyMM": "",
      "maxDeltaLateMM": "",
      "minGap": "",
      "outputs": 0,
      "x": 2950,
      "y": 1820,
      "wires": []
  },
  {
      "id": "7e9850d297b906d5",
      "type": "laneSegment",
      "z": "be047adf.efd448",
      "d": true,
      "g": "ed186c194cd4b694",
      "name": "M08 (after WD02)",
      "projectConfig": "7169103ebb173261",
      "statusBroker": "",
      "beltLength": "",
      "beltType": "lane",
      "beltHasSensor": true,
      "beltSpeed": "1350",
      "etaOffsetAfterBeltRestart": "",
      "stopOnInstrumentWait": false,
      "stopZoneLength": "",
      "sensorPositionFromEnd": "300",
      "staticBeltRestartDelay": "",
      "noOfMotorsToStartDownstream": "",
      "idleTimeout": "",
      "endOfLaneSegment": false,
      "endOfLaneHasBeltMotor": false,
      "hasCongestionSensor": true,
      "congestionTime": 1500,
      "minSpacingType": "",
      "maxDeltaEarlyMM": "",
      "maxDeltaLateMM": "",
      "minGap": "",
      "outputs": 3,
      "x": 2990,
      "y": 1260,
      "wires": [
          [
              "086e7895c1265529"
          ],
          [
              "4531e25fd4bf6dcf"
          ],
          []
      ]
  },
  {
      "id": "29d6dd72b00cadb4",
      "type": "binSensor",
      "z": "be047adf.efd448",
      "d": true,
      "g": "ed186c194cd4b694",
      "name": "S08 (Merge)",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "inputNo": "S08",
      "outputs": 1,
      "x": 2750,
      "y": 1580,
      "wires": [
          [
              "7465f1afcb57d283"
          ]
      ]
  },
  {
      "id": "bbdf8c8e990aeeb1",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "d": true,
      "g": "884cb4a3a6cca981",
      "name": "M09",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M09",
      "outputs": 0,
      "x": 2430,
      "y": 1780,
      "wires": []
  },
  {
      "id": "037a9df5f613f436",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "d": true,
      "g": "884cb4a3a6cca981",
      "name": "M10",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M10",
      "outputs": 0,
      "x": 2430,
      "y": 1840,
      "wires": []
  },
  {
      "id": "fe37479312cc47a8",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "d": true,
      "g": "884cb4a3a6cca981",
      "name": "M11",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M11",
      "outputs": 0,
      "x": 2430,
      "y": 840,
      "wires": []
  },
  {
      "id": "10ccf3e541fdf8cf",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "d": true,
      "g": "884cb4a3a6cca981",
      "name": "M13",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M20",
      "outputs": 0,
      "x": 2430,
      "y": 1400,
      "wires": []
  },
  {
      "id": "52f8a22549a760f7",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "M11",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M11",
      "outputs": 0,
      "x": 990,
      "y": 840,
      "wires": []
  },
  {
      "id": "796cde9d56d35373",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "M17",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M17",
      "outputs": 0,
      "x": 990,
      "y": 1080,
      "wires": []
  },
  {
      "id": "42227d3335555497",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "M09",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M09",
      "outputs": 0,
      "x": 990,
      "y": 1800,
      "wires": []
  },
  {
      "id": "45fc16aa91bacc03",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "M10",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M10",
      "outputs": 0,
      "x": 990,
      "y": 1880,
      "wires": []
  },
  {
      "id": "cc7b4f05f65c6b5b",
      "type": "binSensor",
      "z": "be047adf.efd448",
      "g": "d0f9e0d6e6258576",
      "name": "S08 (Merge)",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "inputNo": "S08",
      "sendInitialState": false,
      "outputs": 1,
      "x": 430,
      "y": 660,
      "wires": [
          [
              "5556c19d32c7fe23"
          ]
      ]
  },
  {
      "id": "0725f30fbebf995a",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "d": true,
      "g": "33bc0eefe3ee9470",
      "name": "M12",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M12",
      "outputs": 0,
      "x": 1270,
      "y": 1160,
      "wires": []
  },
  {
      "id": "34bb5fb59b3b84bb",
      "type": "beltDriver",
      "z": "be047adf.efd448",
      "d": true,
      "g": "33bc0eefe3ee9470",
      "name": "M13",
      "statusBroker": "5648aea3.4ed66",
      "ioConnect": "e5903d21.b21808",
      "outputNo": "M13",
      "outputs": 0,
      "x": 1290,
      "y": 1360,
      "wires": []
  },
  {
      "id": "74a9f3a80d0e1aa6",
      "type": "dwsInject",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "",
      "messageType": "control/divert_left",
      "delayBetweenMessages": "",
      "howManyToWakeup": "",
      "pkgId": "",
      "stopReason": "",
      "sensorName": "",
      "source": "",
      "newPkgSource": "Scan1",
      "newPkgBarcodeEnabled": true,
      "newPkgBarcode1": "123456",
      "newPkgBarcode2": "",
      "newPkgBarcode3": "",
      "newPkgBarcodeDelay": "",
      "newPkgBarcodeError": "",
      "newPkgDimensionsEnabled": true,
      "newPkgDimensionsDelay": "",
      "newPkgDimensionsWarning": "",
      "newPkgDimensionsError": "",
      "newPkgDimensionsHeight": "200",
      "newPkgDimensionsLength": "350",
      "newPkgDimensionsWidth": "200",
      "newPkgSortedEnabled": true,
      "newPkgSortedDelay": "",
      "newPkgSortedDropReason": "",
      "newPkgSortedLane": "1",
      "newPkgWeightEnabled": true,
      "newPkgWeight": "1500",
      "newPkgWeightDelay": "",
      "newPkgWeightWarning": "",
      "newPkgWeightError": "",
      "outputs": 1,
      "x": 1470,
      "y": 1440,
      "wires": [
          [
              "b3342c2850b2ea62"
          ]
      ]
  },
  {
      "id": "d8a9abd0041b5772",
      "type": "dwsInject",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "",
      "messageType": "control/no_divert",
      "delayBetweenMessages": "",
      "howManyToWakeup": "",
      "pkgId": "",
      "stopReason": "",
      "sensorName": "",
      "source": "",
      "newPkgSource": "Scan1",
      "newPkgBarcodeEnabled": true,
      "newPkgBarcode1": "123456",
      "newPkgBarcode2": "",
      "newPkgBarcode3": "",
      "newPkgBarcodeDelay": "",
      "newPkgBarcodeError": "",
      "newPkgDimensionsEnabled": true,
      "newPkgDimensionsDelay": "",
      "newPkgDimensionsWarning": "",
      "newPkgDimensionsError": "",
      "newPkgDimensionsHeight": "200",
      "newPkgDimensionsLength": "350",
      "newPkgDimensionsWidth": "200",
      "newPkgSortedEnabled": true,
      "newPkgSortedDelay": "",
      "newPkgSortedDropReason": "",
      "newPkgSortedLane": "1",
      "newPkgWeightEnabled": true,
      "newPkgWeight": "1500",
      "newPkgWeightDelay": "",
      "newPkgWeightWarning": "",
      "newPkgWeightError": "",
      "outputs": 1,
      "x": 1480,
      "y": 1500,
      "wires": [
          [
              "b3342c2850b2ea62"
          ]
      ]
  },
  {
      "id": "dffd489bf216edb6",
      "type": "dwsInject",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "",
      "messageType": "control/divert_left",
      "delayBetweenMessages": "",
      "howManyToWakeup": "",
      "pkgId": "",
      "stopReason": "",
      "sensorName": "",
      "source": "",
      "newPkgSource": "Scan1",
      "newPkgBarcodeEnabled": true,
      "newPkgBarcode1": "123456",
      "newPkgBarcode2": "",
      "newPkgBarcode3": "",
      "newPkgBarcodeDelay": "",
      "newPkgBarcodeError": "",
      "newPkgDimensionsEnabled": true,
      "newPkgDimensionsDelay": "",
      "newPkgDimensionsWarning": "",
      "newPkgDimensionsError": "",
      "newPkgDimensionsHeight": "200",
      "newPkgDimensionsLength": "350",
      "newPkgDimensionsWidth": "200",
      "newPkgSortedEnabled": true,
      "newPkgSortedDelay": "",
      "newPkgSortedDropReason": "",
      "newPkgSortedLane": "1",
      "newPkgWeightEnabled": true,
      "newPkgWeight": "1500",
      "newPkgWeightDelay": "",
      "newPkgWeightWarning": "",
      "newPkgWeightError": "",
      "outputs": 1,
      "x": 1470,
      "y": 1160,
      "wires": [
          [
              "b1ef0ca0df6f84fc"
          ]
      ]
  },
  {
      "id": "bdbec441d2ccf942",
      "type": "dwsInject",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "",
      "messageType": "control/no_divert",
      "delayBetweenMessages": "",
      "howManyToWakeup": "",
      "pkgId": "",
      "stopReason": "",
      "sensorName": "",
      "source": "",
      "newPkgSource": "Scan1",
      "newPkgBarcodeEnabled": true,
      "newPkgBarcode1": "123456",
      "newPkgBarcode2": "",
      "newPkgBarcode3": "",
      "newPkgBarcodeDelay": "",
      "newPkgBarcodeError": "",
      "newPkgDimensionsEnabled": true,
      "newPkgDimensionsDelay": "",
      "newPkgDimensionsWarning": "",
      "newPkgDimensionsError": "",
      "newPkgDimensionsHeight": "200",
      "newPkgDimensionsLength": "350",
      "newPkgDimensionsWidth": "200",
      "newPkgSortedEnabled": true,
      "newPkgSortedDelay": "",
      "newPkgSortedDropReason": "",
      "newPkgSortedLane": "1",
      "newPkgWeightEnabled": true,
      "newPkgWeight": "1500",
      "newPkgWeightDelay": "",
      "newPkgWeightWarning": "",
      "newPkgWeightError": "",
      "outputs": 1,
      "x": 1480,
      "y": 1220,
      "wires": [
          [
              "b1ef0ca0df6f84fc"
          ]
      ]
  },
  {
      "id": "764e4af468b0949b",
      "type": "dwsInject",
      "z": "be047adf.efd448",
      "name": "",
      "messageType": "pkg-create-new",
      "delayBetweenMessages": "",
      "howManyToWakeup": "",
      "pkgId": "",
      "stopReason": "",
      "sensorName": "",
      "source": "",
      "newPkgSource": "Scan1",
      "newPkgBarcodeEnabled": true,
      "newPkgBarcode1": "123456",
      "newPkgBarcode2": "",
      "newPkgBarcode3": "",
      "newPkgBarcodeDelay": "",
      "newPkgBarcodeError": "",
      "newPkgDimensionsEnabled": true,
      "newPkgDimensionsDelay": "",
      "newPkgDimensionsWarning": "",
      "newPkgDimensionsError": "",
      "newPkgDimensionsHeight": "200",
      "newPkgDimensionsLength": "350",
      "newPkgDimensionsWidth": "200",
      "newPkgSortedEnabled": true,
      "newPkgSortedDelay": "",
      "newPkgSortedDropReason": "X",
      "newPkgSortedLane": "1",
      "newPkgWeightEnabled": true,
      "newPkgWeight": "1500",
      "newPkgWeightDelay": "",
      "newPkgWeightWarning": "",
      "newPkgWeightError": "",
      "outputs": 1,
      "x": 220,
      "y": 400,
      "wires": [
          []
      ]
  },
  {
      "id": "562093d226e5b4e7",
      "type": "dwsInject",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "",
      "messageType": "control/divert_right",
      "delayBetweenMessages": "",
      "howManyToWakeup": "",
      "pkgId": "",
      "stopReason": "",
      "sensorName": "",
      "source": "",
      "newPkgSource": "Scan1",
      "newPkgBarcodeEnabled": true,
      "newPkgBarcode1": "123456",
      "newPkgBarcode2": "",
      "newPkgBarcode3": "",
      "newPkgBarcodeDelay": "",
      "newPkgBarcodeError": "",
      "newPkgDimensionsEnabled": true,
      "newPkgDimensionsDelay": "",
      "newPkgDimensionsWarning": "",
      "newPkgDimensionsError": "",
      "newPkgDimensionsHeight": "200",
      "newPkgDimensionsLength": "350",
      "newPkgDimensionsWidth": "200",
      "newPkgSortedEnabled": true,
      "newPkgSortedDelay": "",
      "newPkgSortedDropReason": "",
      "newPkgSortedLane": "1",
      "newPkgWeightEnabled": true,
      "newPkgWeight": "1500",
      "newPkgWeightDelay": "",
      "newPkgWeightWarning": "",
      "newPkgWeightError": "",
      "outputs": 1,
      "x": 1470,
      "y": 1380,
      "wires": [
          [
              "b3342c2850b2ea62"
          ]
      ]
  },
  {
      "id": "797c757bd8384888",
      "type": "dwsInject",
      "z": "be047adf.efd448",
      "g": "33bc0eefe3ee9470",
      "name": "",
      "messageType": "control/divert_right",
      "delayBetweenMessages": "",
      "howManyToWakeup": "",
      "pkgId": "",
      "stopReason": "",
      "sensorName": "",
      "source": "",
      "newPkgSource": "Scan1",
      "newPkgBarcodeEnabled": true,
      "newPkgBarcode1": "123456",
      "newPkgBarcode2": "",
      "newPkgBarcode3": "",
      "newPkgBarcodeDelay": "",
      "newPkgBarcodeError": "",
      "newPkgDimensionsEnabled": true,
      "newPkgDimensionsDelay": "",
      "newPkgDimensionsWarning": "",
      "newPkgDimensionsError": "",
      "newPkgDimensionsHeight": "200",
      "newPkgDimensionsLength": "350",
      "newPkgDimensionsWidth": "200",
      "newPkgSortedEnabled": true,
      "newPkgSortedDelay": "",
      "newPkgSortedDropReason": "",
      "newPkgSortedLane": "1",
      "newPkgWeightEnabled": true,
      "newPkgWeight": "1500",
      "newPkgWeightDelay": "",
      "newPkgWeightWarning": "",
      "newPkgWeightError": "",
      "outputs": 1,
      "x": 1470,
      "y": 1100,
      "wires": [
          [
              "b1ef0ca0df6f84fc"
          ]
      ]
  },
  {
      "id": "e0b4d096f6d0a9b4",
      "type": "dxBarcodeScanner",
      "z": "be047adf.efd448",
      "g": "d0f9e0d6e6258576",
      "name": "barcode2_images",
      "statusBroker": "5648aea3.4ed66",
      "port": "15529",
      "readingDelay": "1800",
      "mode": "images",
      "minNoOfCodes": "1",
      "acceptedCodesJson": "[]",
      "imageFrames": "20,30,40,50",
      "x": 1250,
      "y": 620,
      "wires": []
  },
  {
      "id": "47e7261b12eaf02d",
      "type": "dwsInject",
      "z": "be047adf.efd448",
      "name": "S09 trigger cycle",
      "messageType": "trigger/sensorCycle",
      "delayBetweenMessages": "",
      "howManyToWakeup": "",
      "pkgId": "",
      "stopReason": "",
      "sensorName": "S09",
      "source": "S09",
      "newPkgSource": "Scan1",
      "newPkgBarcodeEnabled": true,
      "newPkgBarcode1": "123456",
      "newPkgBarcode2": "",
      "newPkgBarcode3": "",
      "newPkgBarcodeDelay": "",
      "newPkgBarcodeError": "",
      "newPkgDimensionsEnabled": true,
      "newPkgDimensionsDelay": "",
      "newPkgDimensionsWarning": "",
      "newPkgDimensionsError": "",
      "newPkgDimensionsHeight": "200",
      "newPkgDimensionsLength": "350",
      "newPkgDimensionsWidth": "200",
      "newPkgSortedEnabled": true,
      "newPkgSortedDelay": "",
      "newPkgSortedDropReason": "",
      "newPkgSortedLane": "1",
      "newPkgWeightEnabled": true,
      "newPkgWeight": "1500",
      "newPkgWeightDelay": "",
      "newPkgWeightWarning": "",
      "newPkgWeightError": "",
      "outputs": 1,
      "x": 210,
      "y": 460,
      "wires": [
          [
              "19bf85778ba23374"
          ]
      ]
  },
  {
      "id": "893fd5288be0dca5",
      "type": "dxBarcodeScanner",
      "z": "be047adf.efd448",
      "g": "d0f9e0d6e6258576",
      "name": "barcode2",
      "statusBroker": "5648aea3.4ed66",
      "port": "5529",
      "readingDelay": "1800",
      "mode": "standard",
      "minNoOfCodes": "1",
      "acceptedCodesJson": "[]",
      "imageFrames": "20",
      "x": 1220,
      "y": 560,
      "wires": []
  },
  {
      "id": "db838ba51eb7a311",
      "type": "dashboardUIAlerts",
      "z": "be047adf.efd448",
      "g": "8107ad0873d7290c",
      "name": "",
      "outputs": 1,
      "x": 1570,
      "y": 340,
      "wires": [
          [
              "0c36ff577185d03e"
          ]
      ]
  },
  {
      "id": "0c36ff577185d03e",
      "type": "ui_template",
      "z": "be047adf.efd448",
      "g": "8107ad0873d7290c",
      "group": "8efe9fc5.d684b8",
      "name": "System Events",
      "order": 1,
      "width": "8",
      "height": "2",
      "format": "<div\n  style=\"height: 100%; overflow: auto; background-color: var(--dws-container-bg-color); border-radius: 15px; scrollbar-width: thin;\">\n  <p ng-repeat=\"event in events | orderBy: '-' track by event.id\" style=\"margin-left: 15px;\">\n    {{ event.timestamp | date:'dd MMM HH:mm:ss' }} | {{ event.message }}\n  </p>\n</div>\n\n<script>\n  (function (scope) {\n    scope.events = [{\n      timestamp: Date.now(), message: \"Dashboard loaded\"\n    }]\n\n    // TODO this is a dev thing that is it not needed satisfy the customers requirement.\n    // scope.send({\n    //   topic: 'userLoad',\n    //   payload: {\n    //     instruction: 'send_latest_events',\n    //     /** This enables the backend to send message before this timestamp. */\n    //     timestamp: Date.now()\n    //   }\n    // })\n\n    scope.$watch('msg', (msg) => {\n      if (msg) {\n        switch (msg.topic) {\n          case 'event':\n            /** @type {{message: string, timestamp: number, id: string}} */\n            const event = {\n              id: msg.payload.id,\n              message: msg.payload.message,\n              timestamp: msg.payload.timestamp,\n            }\n\n            // event could be new or an update of an old event.\n            // If it is new, we add to the event array.\n            // If it is old, we just update the old event based on the id.\n            let eventAlreadyPresent = false\n            for (const currentEvent of scope.events) {\n              if (event.id === currentEvent.id) {\n                eventAlreadyPresent = true\n                currentEvent.message = event.message\n                currentEvent.timestamp = event.timestamp\n              }\n            }\n\n            if (!eventAlreadyPresent) {\n              scope.events.push(event)\n            }\n\n            while (scope.events.length > 200) {\n              scope.events.shift()\n            }\n            break;\n        }\n      }\n    })\n  })(scope)\n</script>\n",
      "storeOutMessages": true,
      "fwdInMessages": true,
      "resendOnRefresh": true,
      "templateScope": "local",
      "x": 1810,
      "y": 340,
      "wires": [
          []
      ]
  }
]